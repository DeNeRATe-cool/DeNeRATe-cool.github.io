<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>The Differences in Grammar between AE &amp; BE</title>
    <url>/2022/11/26/The-Differences-in-Grammar-between-AE-BE/</url>
    <content><![CDATA[<h1 id="The-Differences-in-Grammar-between-AE-amp-BE"><a href="#The-Differences-in-Grammar-between-AE-amp-BE" class="headerlink" title="The Differences in Grammar between AE &amp; BE"></a>The Differences in Grammar between AE &amp; BE</h1><h2 id="Some-situations-around-us"><a href="#Some-situations-around-us" class="headerlink" title="Some situations around us"></a>Some situations around us</h2><p>Today we focus on the rather insignificant differences in their grammar and speaking rules, here we have a lead in video clip to give u a little preview.</p>
<h3 id="英式英语："><a href="#英式英语：" class="headerlink" title="英式英语："></a>英式英语：</h3><p>《神探夏洛特》《唐顿庄园》《IT狂人》（可放一些片段），当然还有《哈利波特》《国王的演讲》《傲慢与偏见》等</p>
<h3 id="美式英语："><a href="#美式英语：" class="headerlink" title="美式英语："></a>美式英语：</h3><p>《破产姐妹》《生活大爆炸》等（一些片段）</p>
<h2 id="The-origin-or-history-of-the-difference"><a href="#The-origin-or-history-of-the-difference" class="headerlink" title="The origin or history of the difference"></a>The origin or history of the difference</h2><ol>
<li><p>During the rather long colonial times, there was no significant differences between AE &amp; BE. However,  After the appearance of nationalist in the U.S, there came the ones who suggested to have their own concept of language, which gradually formed into a rather new type of traditional English.</p>
</li>
<li><p>Due to the UK’s political system, the British is famous for minding their intonation and following strict grammar rules, for it is seen as a tool to show their good upbringing and graceful temperament. The Americans, on the other hand, speak in a rather easygoing way, thus form a not so complicated yet rather vigorous language system.</p>
</li>
<li><p>Cultural and geological aspects, which are two of the main causes, are considered to be the two biggest influences. On account of the mass immigrants and cultural integration, AE was greatly reconstructed into its nowadays feature. BE remains, on the other hand, rather old-fashioned and traditional, while gradually adding and cutting out some of its European flavour.</p>
<p>英语的发展经历了三个时期：古英语、中古英语、近代英语，在罗马人引进拉丁语、维京人促进英语的简化、诺曼公爵带入法语的影响下，随着英国的工业革命和殖民扩张，英语也随着大不列颠日不落帝国的士兵和商人开始散步到世界各地。</p>
</li>
</ol>
<h3 id="Appearance"><a href="#Appearance" class="headerlink" title="Appearance"></a>Appearance</h3><p><strong><em>\</em>在北美大陆被殖民的很长一段时间里，美式英语和英式英语并没有什么显著的不同**</strong>。但在1776独立战争和1812第二次对英战争后，<strong><em>\</em>民族主义势力抬头，促进了美国民族语言的确立和语言民族主义的出现**</strong>，当时，语言学家韦伯斯特等人<strong><em>\</em>主张美国应该有自己独立的“国文”。**</strong>他首创“American English”一词。因此，<strong><em>\</em>美式英语在一定意义上说话是从英式英语中分离出来的。**</strong></p>
<h3 id="Politics-reasons"><a href="#Politics-reasons" class="headerlink" title="Politics reasons"></a>Politics reasons</h3><p>由于英国是一个君主立宪制国家，阶层等级影响深远，<strong><em>\</em>因此英国人注重说话时的语气和腔调，以此来体现自己的身份和教养。**</strong>然而，美国是联邦制国家，一系列制度使美国主张平等、自由、人权，<strong><em>\</em>因此美国人说话比较随和。**</strong>因此，这些政治原因也就逐渐对英式英语和美式英语的语法等方面产生了不小的影响</p>
<h3 id="Cultural-reasons"><a href="#Cultural-reasons" class="headerlink" title="Cultural reasons"></a>Cultural reasons</h3><p>自1688年光荣革命以来，英国国内并未爆发过大规模的内战或者革命。普遍认为这与英国民族文化中的经验主义和渐变注意有关系。<strong><em>\</em>这种文化传统使英式英语中的语法、词汇等变化相对保守**</strong>。而美国作为一个移民国家，<strong><em>\</em>多民族的融合使得美式英语接纳了很多外来产物。**</strong></p>
<h2 id="Some-difference-between-AE-amp-BE"><a href="#Some-difference-between-AE-amp-BE" class="headerlink" title="Some difference between AE &amp; BE"></a>Some difference between AE &amp; BE</h2><p>In general, there are no significant differences between the grammar system of AE &amp; BE, compare with what we have seen in vocabulary and pronunciation. According to some linguists, there are no inventorial difference in the essence of English grammar, only with minor distributional differences, which is what we want to go through today.</p>
<p>总的说来，英美英语语法具有共同的体系，与语音和词汇相比，差异比较少，无明显规律可 循。语言学家认为，英美英语语法本质上不存在体系性差异（inventorial difference），只存在一些分布性差异（distributional difference）</p>
<p>Here we have the different usage of some verbs: get, have, seem, prepositions, articles, phrase like negative conjecture, modal verb, other tense, and subjunctive mood.</p>
<h3 id="Verb："><a href="#Verb：" class="headerlink" title="Verb："></a>Verb：</h3><h4 id="Get："><a href="#Get：" class="headerlink" title="Get："></a>Get：</h4><p>AE frequently use the conjugation gotten to express motions such as to acquire, to obtain, to cause, to come,etc.</p>
<p>BE中无gotten形式，同时AE在表示to acquire, to obtain, to cause, to come, to succeed in     doing, to come to have等意义时用gotten。</p>
<p>e.g.</p>
<p>（1）I’ve always gotten good service from them, let me give you their phone number and     you can call them.（to acquire）</p>
<p>（2）she’s gotten a neurosis.（to come to have）（have gottem有“逐渐患上”的意思，    have got只有“患上”的意思）</p>
<h4 id="Have："><a href="#Have：" class="headerlink" title="Have："></a>Have：</h4><p>Apart for the common usage of have, which means owning sth in both AE &amp; BE, BE widened its meaning in to a form of auxiliary verb, while AE use it solely as a notional verb.</p>
<p>BE中，have既是助动词，又是实义动词；AE中，只用作实义动词。</p>
<p>e.g.</p>
<p>（1）hasn’t she got a new green car?（BE）</p>
<p>（2）doesn’t she have a new green car?（AE）</p>
<p>​    同时，BE用do you have的形式，表示经常；而AE用usually之类的词来表示。</p>
<p>e.g</p>
<p>（1）do they have enough to ear in Zambia?（BE）</p>
<p>（2）do thry usually have enough to eat in Zambia?（AE）</p>
<h4 id="Like："><a href="#Like：" class="headerlink" title="Like："></a>Like：</h4><p>In BE, like is used more frequently to connect to do, while used to connect noun to refer to usual situations.</p>
<p>BE中，like接不定式多指具体情况，而接动名词多指通常情况；而AE中，更偏向于使用不定式。</p>
<p>e.g.</p>
<p>（1）I like swimming, but I don’t like to swim in such bad weather.（BE）</p>
<p>（2）that guy’s got a personality problem, he just likes to disrupt my life to make himself feel     important.（AE）</p>
<h4 id="Seem："><a href="#Seem：" class="headerlink" title="Seem："></a>Seem：</h4><p>To refer to sth that looks alike, British people usually goes with phrase that is clearer, while AE came in with more prepositions.</p>
<p>BE中，如果添加名词，直接使用seem + n.；而AE中，需要使用seem to be + n.</p>
<p>e.g.</p>
<p>（1）he seems a clever boy.（BE）</p>
<p>（2）he seems to be a clever boy.（AE）</p>
<h4 id="Must："><a href="#Must：" class="headerlink" title="Must："></a>Must：</h4><p>When denying sth, American English speaker frequently use the phrase Cannot/can’t, while British speaker express their veto by saying mustn’t/must not. With no significant differences in their extent of the negativity.</p>
<p>BE中，对于否定推测，用can’t or cannot；AE中，用must not</p>
<p>e.g.</p>
<p>（1）it can’t be true.（BE）</p>
<p>（2）it must not be true.（AE）</p>
<h4 id="Need-dare："><a href="#Need-dare：" class="headerlink" title="Need/dare："></a>Need/dare：</h4><p>In BE, the two words are used as auxiliary verb more often, while in AE, they can used as both auxiliary verb and Substantive verbs.</p>
<p>BE中，偏向于将其作为助动词；AE中，可用作助动词，也可用作实义动词</p>
<p>e.g.</p>
<p>（1）dare he say any word?（BE）</p>
<p>（2）does he dare to say any word?（AE）</p>
<h4 id="Shall-will："><a href="#Shall-will：" class="headerlink" title="Shall/will："></a>Shall/will：</h4><p>To express of demand sth that will happen in the future, BE often use shall while AE use will, </p>
<p>表示将来行为时，BE一般第一人称用shall，而AE倾向于用will。在过去将来时中，BE第一人称用should，而AE用would</p>
<p>e.g.</p>
<p>（1）we(or I) shall leave for Italy on Saturday.</p>
<p>（2）we(or I) will leave for Italy on Saturday.</p>
<h3 id="Prep-amp-Art："><a href="#Prep-amp-Art：" class="headerlink" title="Prep &amp; Art："></a>Prep &amp; Art：</h3><p>To present the differences of prepositions and articles, we have two charts to help you understand.</p>
<p><img src="https://s2.loli.net/2022/11/26/23d9Yyon8WgqOTu.jpg" alt="wps1.jpg"></p>
<p><img src="https://s2.loli.net/2022/11/26/sriBXnKU8vDeuPg.jpg" alt="wps2.jpg"></p>
<h3 id="虚拟语气："><a href="#虚拟语气：" class="headerlink" title="虚拟语气："></a>虚拟语气：</h3><p>In subjunctive mood, the major difference goes between whether the modal verb ‘should’ is neglected.</p>
<p>例如it is important/necessary/vital/essential + that从句的句型中，should是否省略</p>
<p>e.g.</p>
<p>（1）they suggested that all the people should set off right now.（BE）</p>
<p>（2）they suggested that all the people set off right now.（AE）</p>
<h3 id="时态："><a href="#时态：" class="headerlink" title="时态："></a>时态：</h3><p>To present a motion in the near past, the British often use past perfect, while American speaker just talk in past simple.</p>
<p>在BE中，表示刚做完一个动作时，一般采用现在完成时，并于already，just，yet连用；而AE中，更常采用一般过去时表示。</p>
<p>e.g.</p>
<p>（1）i’ve just finished lunch.（BE）</p>
<p>（2）i just finished lunch.（AE）</p>
<p>The sense of singular and plural considering an aggregation.</p>
<p>An aggregation, such as a team, which is build up by multiple elements, has different definition about its nature. In BE, one might often say: Which team are losing when the speaker focus on the person and Which team is losing when the speaker focus on the elements. In AE, on the other hand, the question always goes as Which team is losing, regardless of the context. </p>
<h3 id="口语："><a href="#口语：" class="headerlink" title="口语："></a>口语：</h3><p>Here, for the difference in spoken English, Aren’t/ain’t and OK/right must be the example.</p>
<p> Aren’t/ain’t：</p>
<p>反义疑问句中陈述部分是am时，附加疑问句BE习惯用aren’t来代替am not，而AE偏向于使用ain’t</p>
<p>e.g.</p>
<p>（1）i am older than you, aren’t i?（BE &amp; AE）</p>
<p>（2）i am older than you, ain’t i?（AE）</p>
<p>其中ain’t不仅可以代替am not，还可以代替is not, has not, have not。</p>
<p> OK/right：</p>
<p>附加疑问句中，AE常用OK、right将附加疑问取代</p>
<p>e.g.</p>
<p>（1）we’ll have to go, right?</p>
<p>（2）let’s do it, OK?</p>
<p> 电话用语this/that：</p>
<p>e.g.</p>
<p>（1）is that Tom?（BE）</p>
<p>（2）is this Tom?（AE）</p>
<h2 id="What-should-we-choose-between-AE-amp-BE-as-a-university-student"><a href="#What-should-we-choose-between-AE-amp-BE-as-a-university-student" class="headerlink" title="What should we choose between AE &amp; BE as a university student"></a>What should we choose between AE &amp; BE as a university student</h2><p>First：<strong><em>\</em>AE is used as the main language for more people.**</strong> Actually, in Britain, BE doesn’t refer to that it’s spoken by the whole of british people. There are amounts of dialects which are of big difference. However, Americans have more consensus in AE. Added that the influence of America there years, thus, AE is used more often than BE.</p>
<p>Second：As students, when it is time for us to look up some resources, <strong><em>\</em>there are more in AE**</strong>.  </p>
<p>Third：<strong><em>\</em>we are able to change AE accent into BE easily.**</strong> Just like a southern man who decides to be expert in Mandarin Chinese, it is difficult for him because of the subconsciousness. But for AE users, it seems to be more easy.</p>
<p>In fact, there is no mandatory requirement of learning English. And it mainly depends on someone’s hobbies. Like BE? Maybe on account of its elegence. Like AE? Maybe by virtue of its simpleness and vividness.</p>
<p>First：<strong><em>\</em>美式英语用的人多**</strong>。英式英语其实不是指整个英国讲的英语，而是特指伦敦那一小片地区的英语方言。英语有很多种不同的方言，彼此区别比较大。相反，美国人讲的美式英语很统一。再加上美国这些年相较于英国的影响力，将美式英语的人较英式英语更多。</p>
<p>Second：<strong><em>\</em>美式英语的学习素材多**</strong>。就有声资料来说，市面上基本都是美式英语，并且美式英语的统一，使得其学起来目标明确。</p>
<p>Third：<strong><em>\</em>美式英语可以换英式**</strong>。美式英语最大特色是卷舌音，发音较难，如果学会了美式英语，稍微练一下，可以从美式英语转换成英式英语。但相反，从英式转换成美式就较难。这就好比南方人学普通话，虽然知道是是翘舌音，但临时还是会反应不过来，需要专门训练了才会好一些</p>
<p>But：对于学什么英语并不是有强制要求，主要还是看自己的爱好，喜欢英式英语，可能是因为它的优雅高贵，喜欢美式英语，可能是因为它的简单生动。</p>
<h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><p>朱留成.浅谈英式英语和美式英语的差异.[J].教学与研究，1993（15）</p>
<p>李颜伟.美式英语的形成与美国历史.[J].天津大学学报，2001（03）</p>
<p>张俊娟.关于英式英语和美式英语的差异性比较研究.[J].科技信息，2011（28）</p>
<p>Liston：<a href="https://zhuanlan.zhihu.com/p/422948107">https://zhuanlan.zhihu.com/p/422948107</a></p>
<p>英美英语动词用法的差异_刘佳芳</p>
<p>环球英语中英式英语和美式英语在语法上的比较_邵协</p>
]]></content>
      <tags>
        <tag>BUAA</tag>
      </tags>
  </entry>
  <entry>
    <title>diary</title>
    <url>/2022/07/26/diary/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7815481aa115d283e09ce2d7c6852ee80f1f5eacfcc277192b4d8dcd57694933"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>life</tag>
      </tags>
  </entry>
  <entry>
    <title>improvement group boards</title>
    <url>/2022/08/24/improvement-group-boards/</url>
    <content><![CDATA[<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//improvement group</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ld long double</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> cl(x, y) memset((x), (y), sizeof(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = a; i &lt;= b; i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = a; i &gt;= b; i--)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> de(x) cerr &lt;&lt; #x &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inc_mod(x, y) x = ((x - y) % mod + mod) % mod</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> add_mod(x, y) x = (x + y) % mod</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mul_mod(x, y) x = (x  *  y) % mod</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lowbit(x) (x &amp; (-x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> inf 0x3f3f3f3f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod_one 998244353</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> mod_two 1000000007</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rson (x &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> lson (x &lt;&lt; 1)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> buffer[<span class="number">100001</span>], *s, *t; </span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">char</span> <span class="title">get_char</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s == t) &#123;  </span><br><span class="line">        t = (s = buffer) + <span class="built_in">fread</span>(buffer, <span class="number">1</span>, <span class="number">100001</span>, stdin);</span><br><span class="line">        <span class="keyword">if</span>(s == t) <span class="keyword">return</span> EOF;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *s++; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">fread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> ch; </span><br><span class="line">    <span class="type">int</span> temp = <span class="number">0</span>;  </span><br><span class="line">    <span class="keyword">for</span>(ch = <span class="built_in">get_char</span>(); ch &lt; <span class="string">&#x27;0&#x27;</span> || ch &gt; <span class="string">&#x27;9&#x27;</span>; ch = <span class="built_in">get_char</span>());  </span><br><span class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">        temp = (temp &lt;&lt; <span class="number">1</span>) + (temp &lt;&lt; <span class="number">3</span>) + (ch - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">        ch = <span class="built_in">get_char</span>();  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> temp;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">file</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;.in&quot;</span>, <span class="string">&quot;r&quot;</span>, stdin);</span><br><span class="line">    <span class="built_in">freopen</span>(<span class="string">&quot;.out&quot;</span>, <span class="string">&quot;w&quot;</span>, stdout);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read_int</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> temp = <span class="number">0</span>, fac = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch &gt; <span class="string">&#x27;9&#x27;</span> || ch &lt; <span class="string">&#x27;0&#x27;</span>) &#123; <span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>) &#123; fac = <span class="number">-1</span>; &#125; ch = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123; temp = (temp &lt;&lt; <span class="number">1</span>) + (temp &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch  =  <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">    <span class="keyword">return</span> temp * fac;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read_ll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll temp = <span class="number">0</span>, fac = <span class="number">1</span>;</span><br><span class="line">    <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">    <span class="keyword">while</span>(ch &gt; <span class="string">&#x27;9&#x27;</span> || ch &lt; <span class="string">&#x27;0&#x27;</span>) &#123; <span class="keyword">if</span>(ch == <span class="string">&#x27;-&#x27;</span>) &#123; fac = <span class="number">-1</span>; &#125; ch = <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">    <span class="keyword">while</span>(ch &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;9&#x27;</span>) &#123; temp = (temp &lt;&lt; <span class="number">1</span>) + (temp &lt;&lt; <span class="number">3</span>) + (ch ^ <span class="number">48</span>); ch  =  <span class="built_in">getchar</span>(); &#125;</span><br><span class="line">    <span class="keyword">return</span> temp * fac;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(now &lt; <span class="number">0</span>) &#123; <span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>), now = -now; &#125;</span><br><span class="line">    <span class="keyword">if</span>(now &gt; <span class="number">9</span>) &#123; <span class="built_in">write</span>(now / <span class="number">10</span>); &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(now % <span class="number">10</span> + <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">mul</span><span class="params">(ll l, ll r)</span> </span>&#123;</span><br><span class="line">    l = (l % mod_one + mod_one) % mod_one; </span><br><span class="line">    r = (r % mod_one + mod_one) % mod_one;</span><br><span class="line">	ll res = l * r - (ll)((ld)l / mod_one * r + <span class="number">1e-8</span>) * mod_one;</span><br><span class="line">	<span class="keyword">return</span> res &lt; <span class="number">0</span> ? res + mod_one : res; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> dijkstra &#123;</span><br><span class="line">    <span class="type">const</span> ll maxn = <span class="number">1e4</span> + <span class="number">10</span>,  maxm = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    ll total, side, u, v, w, opt, sta;</span><br><span class="line">    ll nxt[maxm &lt;&lt; <span class="number">1</span>], head[maxn], ed[maxm &lt;&lt; <span class="number">1</span>], cur, val[maxm &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="type">bool</span> jud[maxn];</span><br><span class="line">    ll dist[maxn];</span><br><span class="line">    priority_queue&lt;pair&lt;ll, ll&gt;, vector&lt;pair&lt;ll, ll&gt; &gt;, greater&lt;pair&lt;ll, ll&gt; &gt; &gt; mine;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cl</span>(dist, <span class="number">0x3f</span>);</span><br><span class="line">        dist[sta] = <span class="number">0</span>;</span><br><span class="line">        mine.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(dist[sta], sta));</span><br><span class="line">        <span class="keyword">while</span>(!mine.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            pair&lt;ll, ll&gt;now = mine.<span class="built_in">top</span>();</span><br><span class="line">            mine.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(jud[now.second]) <span class="keyword">continue</span>;</span><br><span class="line">            jud[now.second] = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">for</span>(ll i = head[now.second]; i; i = nxt[i]) </span><br><span class="line">                <span class="keyword">if</span>(dist[ed[i]]&gt;now.first + val[i]) &#123;</span><br><span class="line">                    dist[ed[i]] = now.first + val[i];</span><br><span class="line">                    mine.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(dist[ed[i]], ed[i]));</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add_edge</span><span class="params">(ll from, ll to, ll temp)</span> </span>&#123; </span><br><span class="line">        nxt[++cur] = head[from]; </span><br><span class="line">        head[from] = cur; </span><br><span class="line">        ed[cur] = to; </span><br><span class="line">        val[cur] = temp; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld&quot;</span>, &amp;total, &amp;side, &amp;sta);</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, side) &#123; <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld&quot;</span>, &amp;u, &amp;v, &amp;w); <span class="built_in">add_edge</span>(u, v, w); &#125;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, dist[i] == inf ? <span class="number">0x7fffffff</span> : dist[i]); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> spfa &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e4</span> + <span class="number">10</span>, maxm = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    ll total, side, u, v, w, opt, sta;</span><br><span class="line">    ll nxt[maxm &lt;&lt; <span class="number">1</span>], head[maxn], ed[maxm &lt;&lt; <span class="number">1</span>], cur, val[maxm &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="type">bool</span> jud[maxn];</span><br><span class="line">    ll dist[maxn];</span><br><span class="line">    deque&lt;ll&gt; mine;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cl</span>(dist, <span class="number">0x3f</span>);</span><br><span class="line">        dist[sta] = <span class="number">0</span>; </span><br><span class="line">        jud[sta] = <span class="literal">true</span>;</span><br><span class="line">        mine.<span class="built_in">push_front</span>(sta);</span><br><span class="line">        <span class="keyword">while</span>(!mine.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            ll now = mine.<span class="built_in">front</span>();</span><br><span class="line">            mine.<span class="built_in">pop_front</span>();</span><br><span class="line">            jud[now] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(ll i = head[now]; i; i = nxt[i]) </span><br><span class="line">                <span class="keyword">if</span>(dist[ed[i]] &gt; dist[now] + val[i]) &#123;</span><br><span class="line">                    dist[ed[i]] = dist[now] + val[i];</span><br><span class="line">                    <span class="keyword">if</span>(!jud[ed[i]]) &#123; </span><br><span class="line">                        <span class="keyword">if</span>(mine.<span class="built_in">empty</span>() || dist[ed[i]]&gt;dist[mine.<span class="built_in">front</span>()]) mine.<span class="built_in">push_back</span>(ed[i]);</span><br><span class="line">                        <span class="keyword">else</span> mine.<span class="built_in">push_front</span>(ed[i]);</span><br><span class="line">                        jud[ed[i]] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add_edge</span><span class="params">(ll from, ll to, ll temp)</span> </span>&#123; </span><br><span class="line">        nxt[++cur] = head[from]; </span><br><span class="line">        head[from] = cur; </span><br><span class="line">        ed[cur] = to; </span><br><span class="line">        val[cur] = temp; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld&quot;</span>, &amp;total, &amp;side, &amp;sta);</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, side) &#123; <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld&quot;</span>, &amp;u, &amp;v, &amp;w); <span class="built_in">add_edge</span>(u, v, w); &#125;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, dist[i] == inf ? <span class="number">0x7fffffff</span> : dist[i]); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> screen_Prime &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e8</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> prime[maxn], cnt;</span><br><span class="line">    <span class="type">bool</span> jud[maxn];</span><br><span class="line">    <span class="type">int</span> limit, test, u;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        jud[<span class="number">0</span>] = jud[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">2</span>, limit) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!jud[i]) &#123; prime[ ++ cnt] = i; &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= cnt &amp;&amp; prime[j] * i &lt;= limit; j++) &#123;</span><br><span class="line">                jud[i * prime[j]] = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">if</span>(!(i % prime[j])) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;limit, &amp;test);</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">        <span class="keyword">while</span>(test--) &#123; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;u); <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, prime[u]); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> kruskal &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5e3</span> + <span class="number">10</span>, maxm = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> total, side, u, v, w, opt;</span><br><span class="line">    <span class="type">int</span> fa[maxn], sum, gro;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">        <span class="type">int</span> from, to, val;</span><br><span class="line">        <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span> &lt; (node a, node b)</span><br><span class="line">        &#123; <span class="keyword">return</span> a.val &lt; b.val; &#125;</span><br><span class="line">    &#125;line[maxm];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">find_fa</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123; <span class="keyword">return</span> fa[now] == now ? now : fa[now] = <span class="built_in">find_fa</span>(fa[now]); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;total, &amp;side); </span><br><span class="line">        gro = total;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, side) &#123; <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;line[i].from, &amp;line[i].to, &amp;line[i].val); &#125;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) fa[i] = i;</span><br><span class="line">        <span class="built_in">sort</span>(line + <span class="number">1</span>, line + side + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, side) &#123;</span><br><span class="line">            <span class="type">int</span> x = <span class="built_in">find_fa</span>(line[i].from), y = <span class="built_in">find_fa</span>(line[i].to);</span><br><span class="line">            <span class="keyword">if</span>(x != y) &#123; fa[x] = y; gro--; sum += line[i].val; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(gro == <span class="number">1</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum); &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="built_in">printf</span>(<span class="string">&quot;orz\n&quot;</span>); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> prim &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5e3</span> + <span class="number">10</span>, maxm = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> total, side, u, v, w, opt;</span><br><span class="line">    <span class="type">int</span> nxt[maxm &lt;&lt; <span class="number">1</span>], head[maxn], ed[maxm &lt;&lt; <span class="number">1</span>], cur, val[maxm &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> dist[maxn], cnt, sum;</span><br><span class="line">    <span class="type">bool</span> jud[maxn];</span><br><span class="line">    priority_queue&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, vector&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt;, greater&lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; &gt; &gt;mine;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cl</span>(dist, <span class="number">0x3f</span>);</span><br><span class="line">        dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        mine.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(dist[<span class="number">1</span>], <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">while</span>(!mine.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;now = mine.<span class="built_in">top</span>();</span><br><span class="line">            mine.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="keyword">if</span>(jud[now.second]) <span class="keyword">continue</span>;</span><br><span class="line">            jud[now.second] = <span class="literal">true</span>;</span><br><span class="line">            sum += now.first;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = head[now.second]; i; i = nxt[i]) </span><br><span class="line">                <span class="keyword">if</span>(dist[ed[i]] &gt; val[i]) &#123;</span><br><span class="line">                    dist[ed[i]] = val[i];</span><br><span class="line">                    mine.<span class="built_in">push</span>(<span class="built_in">make_pair</span>(dist[ed[i]], ed[i]));</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> temp)</span> </span>&#123; </span><br><span class="line">        nxt[++cur] = head[from]; </span><br><span class="line">        head[from] = cur; </span><br><span class="line">        ed[cur] = to; </span><br><span class="line">        val[cur] = temp; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;total, &amp;side);</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, side) &#123; <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;u, &amp;v, &amp;w); <span class="built_in">add_edge</span>(u, v, w); <span class="built_in">add_edge</span>(v, u, w); &#125;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, sum);</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> trisection &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">15</span>;</span><br><span class="line">    <span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> total;</span><br><span class="line">    <span class="type">double</span> loc[maxn], from, to, ans;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">check</span><span class="params">(<span class="type">double</span> temp)</span> </span>&#123;</span><br><span class="line">        <span class="type">double</span> now = <span class="number">1.0</span>, res = <span class="number">0.0</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">0</span>, total - <span class="number">1</span>) &#123;</span><br><span class="line">            res += now * loc[i];</span><br><span class="line">            now *= temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %lf %lf&quot;</span>, &amp;total, &amp;from, &amp;to);</span><br><span class="line">        <span class="built_in">per</span>(i, total, <span class="number">0</span>) &#123; <span class="built_in">scanf</span>(<span class="string">&quot;%lf&quot;</span>, &amp;loc[i]); &#125;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">0</span>, total - <span class="number">1</span>) &#123; loc[i] = loc[i + <span class="number">1</span>] * (i + <span class="number">1</span>); &#125;</span><br><span class="line">        <span class="type">double</span> l = from, r = to;</span><br><span class="line">        <span class="keyword">while</span>(r - l &gt;= eps) &#123;</span><br><span class="line">            <span class="type">double</span> mid = (l + r) / <span class="number">2.0</span>;</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">check</span>(mid)&gt;<span class="number">0</span>) l = mid, ans = mid;</span><br><span class="line">            <span class="keyword">else</span> r = mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.5f\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> tree_array &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> fro[maxn];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(; now &lt;= maxn - <span class="number">5</span>; now += <span class="built_in">lowbit</span>(now)) </span><br><span class="line">            fro[now] += val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; now; now -= <span class="built_in">lowbit</span>(now)) </span><br><span class="line">            res += fro[now];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> line_segment_tree &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    ll tree[maxn &lt;&lt; <span class="number">2</span>], tag[maxn &lt;&lt; <span class="number">2</span>], num[maxn];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push_up</span><span class="params">(ll x)</span> </span>&#123; tree[x] = tree[lson] + tree[rson]; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(ll l, ll r, ll x)</span> </span>&#123;</span><br><span class="line">        ll mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l == r) &#123; tree[x] = num[l]; <span class="keyword">return</span>; &#125;</span><br><span class="line">        <span class="built_in">build</span>(l, mid, lson);</span><br><span class="line">        <span class="built_in">build</span>(mid + <span class="number">1</span>, r, rson);</span><br><span class="line">        <span class="built_in">push_up</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push_down</span><span class="params">(ll l, ll r, ll x)</span> </span>&#123;</span><br><span class="line">        ll mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        tag[lson] += tag[x]; tag[rson] += tag[x];</span><br><span class="line">        tree[lson] += tag[x] * (mid - l + <span class="number">1</span>); tree[rson] += tag[x] * (r - mid);</span><br><span class="line">        tag[x] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(ll from, ll to, ll l, ll r, ll x, ll temp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(from &lt;= l &amp;&amp; to &gt;= r) &#123; tag[x] += temp; tree[x] += temp * (r - l + <span class="number">1</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line">        ll mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">push_down</span>(l, r, x);</span><br><span class="line">        <span class="keyword">if</span>(from &lt;= mid) <span class="built_in">update</span>(from, to, l, mid, lson, temp);</span><br><span class="line">        <span class="keyword">if</span>(to &gt; mid) <span class="built_in">update</span>(from, to, mid + <span class="number">1</span>, r, rson, temp);</span><br><span class="line">        <span class="built_in">push_up</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">get</span><span class="params">(ll from, ll to, ll l, ll r, ll x)</span> </span>&#123;</span><br><span class="line">        ll mid = (l + r) &gt;&gt; <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(l &gt;= from &amp;&amp; r &lt;= to) &#123; res += tree[x]; <span class="keyword">return</span> res; &#125;</span><br><span class="line">        <span class="built_in">push_down</span>(l, r, x);</span><br><span class="line">        <span class="keyword">if</span>(from &lt;= mid) res += <span class="built_in">get</span>(from, to, l, mid, lson);</span><br><span class="line">        <span class="keyword">if</span>(to &gt; mid) res += <span class="built_in">get</span>(from, to, mid + <span class="number">1</span>, r, rson);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> kmp &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> a[maxn], b[maxn];</span><br><span class="line">    <span class="type">int</span> lena, lenb;</span><br><span class="line">    <span class="type">int</span> lost[maxn];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">get_lost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> loc = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, lenb - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span>(loc &amp;&amp; b[i] != b[loc]) loc = lost[loc];</span><br><span class="line">            <span class="keyword">if</span>(b[i] == b[loc]) loc++;</span><br><span class="line">            lost[i + <span class="number">1</span>] = loc;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> loc = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">0</span>, lena - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span>(loc &amp;&amp; a[i] != b[loc]) loc = lost[loc];</span><br><span class="line">            <span class="keyword">if</span>(a[i] == b[loc]) loc++;</span><br><span class="line">            <span class="keyword">if</span>(loc == lenb) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i - lenb + <span class="number">2</span>); &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, lenb) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, lost[i]); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, a); lena = <span class="built_in">strlen</span>(a);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, b); lenb = <span class="built_in">strlen</span>(b);</span><br><span class="line">        <span class="built_in">get_lost</span>();</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> multiplication_lca &#123;  </span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> total, test, root, u, v, w, opt;</span><br><span class="line">    <span class="type">int</span> nxt[maxn &lt;&lt; <span class="number">1</span>], head[maxn], ed[maxn &lt;&lt; <span class="number">1</span>], cur, val[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> dep[maxn], anc[maxn][<span class="number">21</span>], len[maxn][<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> pre)</span> </span>&#123;</span><br><span class="line">        dep[now] = dep[pre] + <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, <span class="number">20</span>) &#123; </span><br><span class="line">            anc[now][i] = anc[anc[now][i - <span class="number">1</span>]][i - <span class="number">1</span>];  </span><br><span class="line">            len[now][i] = len[now][i - <span class="number">1</span>] + len[anc[now][i - <span class="number">1</span>]][i - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = head[now]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(ed[i] == pre) <span class="keyword">continue</span>;</span><br><span class="line">            anc[ed[i]][<span class="number">0</span>] = now;</span><br><span class="line">            len[ed[i]][<span class="number">0</span>] = val[i];</span><br><span class="line">            <span class="built_in">dfs</span>(ed[i], now);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[x] &lt; dep[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">        <span class="built_in">per</span>(i, <span class="number">20</span>, <span class="number">0</span>) &#123; <span class="keyword">if</span>(dep[anc[x][i]] &gt;= dep[y]) x = anc[x][i]; &#125;</span><br><span class="line">        <span class="keyword">if</span>(x == y) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="built_in">per</span>(i, <span class="number">20</span>, <span class="number">0</span>) <span class="keyword">if</span>(anc[x][i] != anc[y][i]) x = anc[x][i], y = anc[y][i];</span><br><span class="line">        <span class="keyword">return</span> anc[x][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> temp)</span> </span>&#123; </span><br><span class="line">        nxt[++cur] = head[from]; </span><br><span class="line">        head[from] = cur; </span><br><span class="line">        ed[cur] = to; </span><br><span class="line">        val[cur] = temp; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;total, &amp;test, &amp;root);</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">2</span>, total) &#123; <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v); <span class="built_in">add_edge</span>(u, v, <span class="number">1</span>); <span class="built_in">add_edge</span>(v, u, <span class="number">1</span>); &#125;</span><br><span class="line">        <span class="built_in">dfs</span>(root, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span>(test--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">solve</span>(u, v));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> negative_loop &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e3</span> + <span class="number">10</span>, maxm = <span class="number">3e3</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    ll total, side, u, v, w, opt, test;</span><br><span class="line">    ll nxt[maxm &lt;&lt; <span class="number">1</span>], head[maxn], ed[maxm &lt;&lt; <span class="number">1</span>], cur, val[maxm &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="type">bool</span> jud[maxn], flag = <span class="literal">true</span>;</span><br><span class="line">    ll dist[maxn], cnt[maxn];</span><br><span class="line">    queue&lt;ll&gt; mine;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cl</span>(dist, <span class="number">0x3f</span>);</span><br><span class="line">        dist[<span class="number">1</span>] = <span class="number">0</span>; </span><br><span class="line">        jud[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">        mine.<span class="built_in">push</span>(<span class="number">1</span>); cnt[<span class="number">1</span>]++;</span><br><span class="line">        <span class="keyword">while</span>(!mine.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            ll now = mine.<span class="built_in">front</span>();</span><br><span class="line">            mine.<span class="built_in">pop</span>();</span><br><span class="line">            jud[now] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(ll i = head[now]; i; i = nxt[i]) </span><br><span class="line">                <span class="keyword">if</span>(dist[ed[i]] &gt; dist[now] + val[i]) &#123;</span><br><span class="line">                    dist[ed[i]] = dist[now] + val[i];</span><br><span class="line">                    <span class="keyword">if</span>(!jud[ed[i]]) &#123; </span><br><span class="line">                        mine.<span class="built_in">push</span>(ed[i]);</span><br><span class="line">                        <span class="keyword">if</span>(++cnt[ed[i]] &gt;= total + <span class="number">1</span>) &#123; flag = <span class="literal">false</span>; <span class="keyword">return</span>; &#125;</span><br><span class="line">                        jud[ed[i]] = <span class="literal">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">clean</span><span class="params">()</span> </span>&#123; <span class="built_in">cl</span>(jud, <span class="literal">false</span>); <span class="built_in">cl</span>(cnt, <span class="number">0</span>); flag = <span class="literal">true</span>; <span class="built_in">cl</span>(head, <span class="number">0</span>); cur = <span class="number">0</span>; <span class="keyword">while</span>(!mine.<span class="built_in">empty</span>()) mine.<span class="built_in">pop</span>(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add_edge</span><span class="params">(ll from, ll to, ll temp)</span> </span>&#123; </span><br><span class="line">        nxt[++cur] = head[from]; </span><br><span class="line">        head[from] = cur; </span><br><span class="line">        ed[cur] = to; </span><br><span class="line">        val[cur] = temp; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cin &gt;&gt; test;</span><br><span class="line">        <span class="keyword">while</span>(test--) &#123;</span><br><span class="line">            <span class="built_in">clean</span>();</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>, &amp;total, &amp;side);</span><br><span class="line">            <span class="built_in">rep</span>(i, <span class="number">1</span>, side) &#123; <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld&quot;</span>, &amp;u, &amp;v, &amp;w); <span class="built_in">add_edge</span>(u, v, w); <span class="keyword">if</span>(w &gt;= <span class="number">0</span>) <span class="built_in">add_edge</span>(v, u, w); &#125;</span><br><span class="line">            <span class="built_in">solve</span>();</span><br><span class="line">            <span class="keyword">if</span>(flag) &#123; <span class="built_in">printf</span>(<span class="string">&quot;NO\n&quot;</span>); &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;  <span class="built_in">printf</span>(<span class="string">&quot;YES\n&quot;</span>); &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> matrix &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    ll test, u;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span> &#123; ll squ[maxn][maxn]; &#125;now, base, cop;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">matrix_fast</span><span class="params">(node &amp;a, node b)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, <span class="number">3</span>) <span class="built_in">rep</span>(j, <span class="number">1</span>, <span class="number">3</span>) cop.squ[i][j] = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, <span class="number">3</span>) <span class="built_in">rep</span>(j, <span class="number">1</span>, <span class="number">3</span>) <span class="built_in">rep</span>(k, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line">        (cop.squ[i][j] += (a.squ[i][k] * b.squ[k][j]) % mod_two) %= mod_two;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, <span class="number">3</span>) <span class="built_in">rep</span>(j, <span class="number">1</span>, <span class="number">3</span>) a.squ[i][j] = cop.squ[i][j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">(ll limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(limit) &#123;</span><br><span class="line">            <span class="keyword">if</span>(limit &amp; <span class="number">1</span>) &#123; <span class="built_in">matrix_fast</span>(now, base); &#125;</span><br><span class="line">            <span class="built_in">matrix_fast</span>(base, base); limit &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">clean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        base.squ[<span class="number">1</span>][<span class="number">1</span>] = base.squ[<span class="number">1</span>][<span class="number">2</span>] = base.squ[<span class="number">2</span>][<span class="number">3</span>] = base.squ[<span class="number">3</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        now.squ[<span class="number">1</span>][<span class="number">1</span>] = now.squ[<span class="number">1</span>][<span class="number">2</span>] = now.squ[<span class="number">1</span>][<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">        base.squ[<span class="number">1</span>][<span class="number">3</span>] = base.squ[<span class="number">2</span>][<span class="number">1</span>] = base.squ[<span class="number">2</span>][<span class="number">2</span>] = base.squ[<span class="number">3</span>][<span class="number">2</span>] = base.squ[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">        now.squ[<span class="number">2</span>][<span class="number">1</span>] = now.squ[<span class="number">2</span>][<span class="number">2</span>] = now.squ[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">        now.squ[<span class="number">3</span>][<span class="number">1</span>] = now.squ[<span class="number">3</span>][<span class="number">2</span>] = now.squ[<span class="number">3</span>][<span class="number">3</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;test);</span><br><span class="line">        <span class="keyword">while</span>(test--) &#123;</span><br><span class="line">            <span class="built_in">clean</span>();</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;u);</span><br><span class="line">            <span class="keyword">if</span>(u &lt;= <span class="number">3</span>) &#123; cout &lt;&lt; <span class="string">&quot;1&quot;</span> &lt;&lt; endl; <span class="keyword">continue</span>; &#125;</span><br><span class="line">            <span class="built_in">solve</span>(u - <span class="number">3</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, now.squ[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> st_list &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> num[maxn];</span><br><span class="line">    <span class="type">int</span> anc[maxn][<span class="number">21</span>];</span><br><span class="line">    <span class="type">int</span> total, test, u, v;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> temp = (<span class="built_in">log2</span>(<span class="built_in">double</span>(r - l + <span class="number">1</span>)));</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">max</span>(anc[l][temp], anc[r - (<span class="number">1</span> &lt;&lt; temp) + <span class="number">1</span>][temp]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;total, &amp;test);</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) &#123; <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num[i]); anc[i][<span class="number">0</span>] = num[i]; &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; (<span class="number">1</span> &lt;&lt; j) &lt;= total; j++) </span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i + (<span class="number">1</span> &lt;&lt; j) - <span class="number">1</span> &lt;= total; i++)</span><br><span class="line">                anc[i][j] = <span class="built_in">max</span>(anc[i][j - <span class="number">1</span>], anc[i + (<span class="number">1</span> &lt;&lt; (j - <span class="number">1</span>))][j - <span class="number">1</span>]); </span><br><span class="line">        <span class="keyword">while</span>(test--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">solve</span>(u, v));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> antichrist &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> inv[maxn], fac[maxn], inv_fac[maxn];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">fast</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123; </span><br><span class="line">        <span class="type">int</span> res = <span class="number">1</span>; </span><br><span class="line">        <span class="keyword">while</span>(b) &#123; </span><br><span class="line">            <span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = res * a % mod_one; </span><br><span class="line">            a = a * a % mod_one; b &gt;&gt;= <span class="number">1</span>; </span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">return</span> res % mod_one; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        inv[<span class="number">0</span>] = inv[<span class="number">1</span>] = <span class="number">1</span>; fac[<span class="number">0</span>] = fac[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">2</span>, maxn - <span class="number">5</span>) &#123;</span><br><span class="line">            inv[i] = (mod_one - mod_one / i) * inv[mod_one % i] % mod_one;</span><br><span class="line">            fac[i] = fac[i - <span class="number">1</span>] * i % mod_one;</span><br><span class="line">        &#125;</span><br><span class="line">        inv_fac[maxn - <span class="number">5</span>] = <span class="built_in">fast</span>(fac[maxn - <span class="number">5</span>], mod_one - <span class="number">2</span>);</span><br><span class="line">        <span class="built_in">per</span>(i, maxn - <span class="number">6</span>, <span class="number">0</span>) &#123; inv_fac[i] = inv_fac[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % mod_one; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> cantor &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    ll num[maxn], fro[maxn];</span><br><span class="line">    ll total, fac[maxn], ans;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(ll now, ll val)</span> </span>&#123; <span class="keyword">while</span>(now &lt;= maxn - <span class="number">5</span>) &#123; (fro[now] += val) %= mod_one; now += <span class="built_in">lowbit</span>(now); &#125; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">get</span><span class="params">(ll now)</span> </span>&#123; ll res = <span class="number">0</span>; <span class="keyword">while</span>(now) &#123; (res += fro[now]) %= mod_one; now -= <span class="built_in">lowbit</span>(now); &#125; <span class="keyword">return</span> res; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) &#123;</span><br><span class="line">            ll temp = num[i] - <span class="number">1</span> - <span class="built_in">get</span>(num[i]);</span><br><span class="line">            (ans += temp * fac[total - i] % mod_one) %= mod_one;</span><br><span class="line">            <span class="built_in">update</span>(num[i], <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;total); </span><br><span class="line">        fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) &#123; <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;num[i]); fac[i] = fac[i - <span class="number">1</span>] * i % mod_one; &#125;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> differential &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5e3</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> total, test;</span><br><span class="line">    <span class="type">int</span> u, v, w, opt;</span><br><span class="line">    <span class="type">int</span> nxt[maxn &lt;&lt; <span class="number">1</span>], head[maxn], ed[maxn &lt;&lt; <span class="number">1</span>], cur, val[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> cnt[maxn], dist[maxn];</span><br><span class="line">    <span class="type">bool</span> vis[maxn], jud = <span class="literal">true</span>;</span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; temp;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">cl</span>(dist, <span class="number">0x3f</span>); </span><br><span class="line">        dist[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        temp.<span class="built_in">push_front</span>(<span class="number">0</span>);</span><br><span class="line">        vis[<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">        cnt[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(!temp.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">            <span class="type">int</span> now = temp.<span class="built_in">front</span>();</span><br><span class="line">            temp.<span class="built_in">pop_front</span>();</span><br><span class="line">            vis[now] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = head[now]; i; i = nxt[i])</span><br><span class="line">                <span class="keyword">if</span>(dist[ed[i]] &gt; dist[now] + val[i]) &#123;</span><br><span class="line">                    dist[ed[i]] = dist[now] + val[i];</span><br><span class="line">                    <span class="keyword">if</span>(!vis[ed[i]]) &#123;</span><br><span class="line">                        <span class="keyword">if</span>(temp.<span class="built_in">empty</span>() || dist[ed[i]] &lt; dist[temp.<span class="built_in">front</span>()]) temp.<span class="built_in">push_front</span>(ed[i]);</span><br><span class="line">                        <span class="keyword">else</span> temp.<span class="built_in">push_back</span>(ed[i]);</span><br><span class="line">                        vis[ed[i]] = <span class="literal">true</span>;</span><br><span class="line">                        <span class="keyword">if</span>((++cnt[ed[i]]) &gt; total) &#123; <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>); <span class="built_in">exit</span>(<span class="number">0</span>); &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> tot)</span> </span>&#123; </span><br><span class="line">        nxt[++cur] = head[from]; </span><br><span class="line">        head[from] = cur; </span><br><span class="line">        ed[cur] = to; </span><br><span class="line">        val[cur] = tot; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;total, &amp;test);</span><br><span class="line">        <span class="keyword">while</span>(test--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;opt);</span><br><span class="line">            <span class="keyword">if</span>(opt == <span class="number">1</span>) &#123; <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;u, &amp;v, &amp;w); <span class="built_in">add_edge</span>(u, v, -w); &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(opt == <span class="number">2</span>) &#123; <span class="built_in">scanf</span>(<span class="string">&quot;%d %d %d&quot;</span>, &amp;u, &amp;v, &amp;w); <span class="built_in">add_edge</span>(v, u, w); &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123; <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;u, &amp;v); <span class="built_in">add_edge</span>(u, v, <span class="number">0</span>); &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) <span class="built_in">add_edge</span>(<span class="number">0</span>, i, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">spfa</span>();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> tarjan_scc &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e4</span> + <span class="number">10</span>, maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> total, side, u, v, w, opt;</span><br><span class="line">    <span class="type">int</span> num[maxn], dfn[maxn], low[maxn], dfn_num, col_num, col[maxn], size[maxn];</span><br><span class="line">    <span class="type">int</span> nxt[maxm &lt;&lt; <span class="number">1</span>], head[maxn], ed[maxm &lt;&lt; <span class="number">1</span>], cur;</span><br><span class="line">    <span class="type">int</span> stack[maxn], top;</span><br><span class="line">    <span class="type">bool</span> jud[maxn];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> pre)</span> </span>&#123;</span><br><span class="line">        low[now] = dfn[now] = ++dfn_num;</span><br><span class="line">        stack[++top] = now;</span><br><span class="line">        jud[now] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = head[now]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(ed[i] == pre) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(!dfn[ed[i]]) &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(ed[i], now);</span><br><span class="line">                low[now] = <span class="built_in">min</span>(low[now], low[ed[i]]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(jud[ed[i]]) </span><br><span class="line">                low[now] = <span class="built_in">min</span>(low[now], dfn[ed[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dfn[now] == low[now]) &#123;</span><br><span class="line">            col_num++;</span><br><span class="line">            <span class="keyword">while</span>(stack[top] != now) &#123;</span><br><span class="line">                <span class="type">int</span> temp = stack[top--];</span><br><span class="line">                jud[temp] = <span class="literal">false</span>;</span><br><span class="line">                col[temp] = col_num;</span><br><span class="line">                size[col_num]++;</span><br><span class="line">            &#125;</span><br><span class="line">            top--;</span><br><span class="line">            jud[now] = <span class="literal">false</span>;</span><br><span class="line">            col[now] = col_num;</span><br><span class="line">            size[col_num]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> cut_point &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e4</span> + <span class="number">10</span>, maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> total, side, u, v, w, opt, ans;</span><br><span class="line">    <span class="type">int</span> nxt[maxm &lt;&lt; <span class="number">1</span>], head[maxn], ed[maxm &lt;&lt; <span class="number">1</span>], cur;</span><br><span class="line">    <span class="type">bool</span> jud[maxn];</span><br><span class="line">    <span class="type">int</span> dfn[maxn], low[maxn], dfn_num;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> pre)</span> </span>&#123;</span><br><span class="line">        dfn[now] = low[now] = ++dfn_num;</span><br><span class="line">        <span class="type">int</span> child = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = head[now]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(ed[i] == pre) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(!dfn[ed[i]]) &#123;</span><br><span class="line">                child++;</span><br><span class="line">                <span class="built_in">dfs</span>(ed[i], now);</span><br><span class="line">                low[now] = <span class="built_in">min</span>(low[now], low[ed[i]]);</span><br><span class="line">                <span class="keyword">if</span>(pre != <span class="number">0</span> &amp;&amp; low[ed[i]] &gt;= dfn[now] &amp;&amp; !jud[now]) </span><br><span class="line">                    jud[now] = <span class="literal">true</span>,  ans++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; low[now] = <span class="built_in">min</span>(low[now], dfn[ed[i]]); &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pre == <span class="number">0</span> &amp;&amp; child &gt;= <span class="number">2</span> &amp;&amp; !jud[now]) &#123; jud[now] = <span class="literal">true</span>; ans++; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> bridge &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e4</span> + <span class="number">10</span>, maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> nxt[maxm &lt;&lt; <span class="number">1</span>], head[maxn], ed[maxm &lt;&lt; <span class="number">1</span>], cur;</span><br><span class="line">    <span class="type">int</span> dfn[maxn], low[maxn], dfn_num;</span><br><span class="line">    <span class="type">bool</span> jud[maxm &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> total, side, u, v, w, opt, ans;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> pre)</span> </span>&#123;</span><br><span class="line">        dfn[now] = low[now] = ++dfn_num;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = head[now]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(ed[i] == pre) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(!dfn[ed[i]]) &#123;</span><br><span class="line">                <span class="built_in">dfs</span>(ed[i], now);</span><br><span class="line">                low[now] = <span class="built_in">min</span>(low[now], low[ed[i]]);</span><br><span class="line">                <span class="keyword">if</span>(low[ed[i]] &gt; dfn[now]) &#123; jud[i] = jud[i ^ <span class="number">1</span>] = <span class="literal">true</span>; ans++; &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> low[now] = <span class="built_in">min</span>(low[now], dfn[ed[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> k_nim &#123;</span><br><span class="line">    <span class="comment">// 这里只打了1 - NIM问题</span></span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> num[maxn], total, test;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) &#123; res ^= num[i]; &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;test);</span><br><span class="line">        <span class="keyword">while</span>(test--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;total);</span><br><span class="line">            <span class="built_in">rep</span>(i, <span class="number">1</span>, total) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num[i]);</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">solve</span>()) &#123; <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>); &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123; <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>); &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> gcd &#123;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (!y) ? x : <span class="built_in">gcd</span>(y, x % y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> ex_gcd &#123;</span><br><span class="line">    ll test, a, b, c, x, y, r, d, cnt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">init</span><span class="params">(ll x, ll y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!y) &#123; x = <span class="number">1</span>; y = <span class="number">0</span>; <span class="keyword">return</span> x; &#125;</span><br><span class="line">        ll p = <span class="built_in">init</span>(y, x % y);</span><br><span class="line">        ll temp = y; y = x - (x / y) * y; x = temp;</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        x = y = r = d = cnt = <span class="number">0</span>;</span><br><span class="line">        r = <span class="built_in">init</span>(a, b);</span><br><span class="line">        <span class="keyword">if</span>(c % r) &#123; <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line">        ll x0 = x * (c / r), y0 = y * (c / r);</span><br><span class="line">        ll p = b / r, q = a / r;</span><br><span class="line">        <span class="keyword">if</span>(x0 &lt; <span class="number">0</span>) &#123; ll k = (ceil)((<span class="number">1.0</span> - x0) / p); x0 += p * k; y0 -= q * k; &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; ll k = (x0 - <span class="number">1</span>) / p; x0 -= p * k; y0 += q * k; &#125;</span><br><span class="line">        <span class="keyword">if</span>(y0 &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, (y0 - <span class="number">1</span>) / q + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld %lld %lld\n&quot;</span>, x0, (y0 - <span class="number">1</span>) % q + <span class="number">1</span>, x0 + p * ((y0 - <span class="number">1</span>) / q), y0);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld &quot;</span>, x0);</span><br><span class="line">            <span class="type">int</span> o = <span class="built_in">ceil</span>((<span class="number">1.0</span> - y0) / q);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, y0 + q * o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;test);</span><br><span class="line">        <span class="keyword">while</span>(test--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld&quot;</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line">            <span class="built_in">solve</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> fhq_treap &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> test, u, v, w, opt, root;</span><br><span class="line">    <span class="type">int</span> weight[maxn], val[maxn], size[maxn], child[maxn][<span class="number">2</span>], cnt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123; size[now] = size[child[now][<span class="number">1</span>]] + size[child[now][<span class="number">0</span>]] + <span class="number">1</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">new_node</span><span class="params">(<span class="type">int</span> temp)</span> </span>&#123; weight[++cnt] = <span class="built_in">rand</span>(); val[cnt] = temp; size[cnt] = <span class="number">1</span>; <span class="keyword">return</span> cnt; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">split</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> limit, <span class="type">int</span> &amp;a, <span class="type">int</span> &amp;b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!now) &#123; a = b = <span class="number">0</span>; <span class="keyword">return</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span>(val[now] &lt;= limit) &#123; a = now; <span class="built_in">split</span>(child[now][<span class="number">1</span>], limit, child[now][<span class="number">1</span>], b); &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; b = now; <span class="built_in">split</span>(child[now][<span class="number">0</span>], limit, a, child[now][<span class="number">0</span>]); &#125;</span><br><span class="line">        <span class="built_in">update</span>(now);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!a || !b) &#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line">        <span class="keyword">if</span>(weight[a] &lt; weight[b]) &#123; child[a][<span class="number">1</span>] = <span class="built_in">merge</span>(child[a][<span class="number">1</span>], b); <span class="built_in">update</span>(a); <span class="keyword">return</span> a; &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123; child[b][<span class="number">0</span>] = <span class="built_in">merge</span>(a, child[b][<span class="number">0</span>]); <span class="built_in">update</span>(b); <span class="keyword">return</span> b; &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">rank</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> limit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(size[child[now][<span class="number">0</span>]] &gt;= limit) now = child[now][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(size[child[now][<span class="number">0</span>]] + <span class="number">1</span> == limit) <span class="keyword">return</span> val[now];</span><br><span class="line">            <span class="keyword">else</span> limit -= size[child[now][<span class="number">0</span>]] + <span class="number">1</span>, now = child[now][<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;test);</span><br><span class="line">        <span class="keyword">while</span>(test--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d %d&quot;</span>, &amp;opt, &amp;u);</span><br><span class="line">            <span class="type">int</span> x = <span class="number">0</span>, y = <span class="number">0</span>, z = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(opt == <span class="number">1</span>) &#123; <span class="built_in">split</span>(root, u - <span class="number">1</span>, x, y); root = <span class="built_in">merge</span>(<span class="built_in">merge</span>(x, <span class="built_in">new_node</span>(u)), y); &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(opt == <span class="number">2</span>) &#123; <span class="built_in">split</span>(root, u - <span class="number">1</span>, x, y); <span class="built_in">split</span>(y, u, y, z); root = <span class="built_in">merge</span>(<span class="built_in">merge</span>(x, <span class="built_in">merge</span>(child[y][<span class="number">0</span>], child[y][<span class="number">1</span>])), z); &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(opt == <span class="number">3</span>) &#123; <span class="built_in">split</span>(root, u - <span class="number">1</span>, x, y); <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, size[x] + <span class="number">1</span>); root = <span class="built_in">merge</span>(x, y); &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(opt == <span class="number">4</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">rank</span>(root, u)); &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(opt == <span class="number">5</span>) &#123; <span class="built_in">split</span>(root, u - <span class="number">1</span>, x, y); <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">rank</span>(x, size[x])); root = <span class="built_in">merge</span>(x, y); &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123; <span class="built_in">split</span>(root, u, x, y); <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">rank</span>(y, <span class="number">1</span>)); root = <span class="built_in">merge</span>(x, y); &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> descartes &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e7</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> child[maxn][<span class="number">2</span>], num[maxn];</span><br><span class="line">    <span class="type">int</span> stack[maxn], top;</span><br><span class="line">    <span class="type">int</span> total, u, v, w, opt;</span><br><span class="line">    ll ans_one, ans_two;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;total);</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) &#123; </span><br><span class="line">            num[i] = <span class="built_in">read_int</span>();</span><br><span class="line">            <span class="type">int</span> k = top;</span><br><span class="line">            <span class="keyword">while</span>(k &amp;&amp; num[stack[k]] &gt;= num[i]) &#123; k--; &#125;</span><br><span class="line">            <span class="keyword">if</span>(k) &#123; child[stack[k]][<span class="number">1</span>] = i; &#125;</span><br><span class="line">            <span class="keyword">if</span>(k != top) &#123; child[i][<span class="number">0</span>] = stack[k + <span class="number">1</span>]; &#125;</span><br><span class="line">            top = k;</span><br><span class="line">            stack[++top] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) &#123; ans_one ^= <span class="number">1ll</span> * i * (child[i][<span class="number">0</span>] + <span class="number">1</span>); ans_two ^= <span class="number">1ll</span> * i * (child[i][<span class="number">1</span>] + <span class="number">1</span>); &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld %lld\n&quot;</span>, ans_one, ans_two);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> minimalist_representation &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">3e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> num[maxn];</span><br><span class="line">    <span class="type">int</span> len, pos_one, pos_two, k, ans;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        pos_one = <span class="number">0</span>, pos_two = <span class="number">1</span>, k = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(pos_one &lt; len &amp;&amp; pos_two &lt; len &amp;&amp; k &lt; len) &#123;</span><br><span class="line">            <span class="keyword">if</span>(num[(pos_one + k) % len] == num[(pos_two + k) % len]) k++;</span><br><span class="line">            <span class="keyword">else</span> &#123; </span><br><span class="line">                (num[(pos_one + k) % len] &lt; num[(pos_two + k) % len]) ? pos_two = (pos_two + k + <span class="number">1</span>) : pos_one = (pos_one + k + <span class="number">1</span>); </span><br><span class="line">                <span class="keyword">if</span>(pos_one == pos_two) pos_one++;</span><br><span class="line">                k = <span class="number">0</span>;   </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = <span class="built_in">min</span>(pos_one, pos_two);</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">0</span>, len - <span class="number">1</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, num[(ans + i) % len]); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;len);</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">0</span>, len - <span class="number">1</span>) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;num[i]);</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> manacher &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1.5e7</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> num[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> len, rou[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line">    <span class="type">int</span> temp, dist, ans;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">char_read</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">char</span> ch = <span class="built_in">getchar</span>();</span><br><span class="line">        num[<span class="number">0</span>] = <span class="string">&#x27;~&#x27;</span>; num[len = <span class="number">1</span>] = <span class="string">&#x27;|&#x27;</span>;</span><br><span class="line">        <span class="keyword">while</span>(ch&lt;<span class="string">&#x27;a&#x27;</span> || ch&gt;<span class="string">&#x27;z&#x27;</span>) ch = <span class="built_in">getchar</span>();</span><br><span class="line">        <span class="keyword">while</span>(ch &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; ch &lt;= <span class="string">&#x27;z&#x27;</span>) num[++len] = ch, num[++len] = <span class="string">&#x27;|&#x27;</span>, ch = <span class="built_in">getchar</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, len) &#123;</span><br><span class="line">            <span class="keyword">if</span>(i &lt;= dist) &#123; rou[i] = <span class="built_in">min</span>(dist - i + <span class="number">1</span>, rou[(temp &lt;&lt; <span class="number">1</span>) - i]); &#125;</span><br><span class="line">            <span class="keyword">while</span>(num[i + rou[i]] == num[i - rou[i]]) rou[i]++;</span><br><span class="line">            <span class="keyword">if</span>(dist &lt; i + rou[i]) temp = i, dist = i + rou[i] - <span class="number">1</span>;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, rou[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">char_read</span>();</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> crt &#123;</span><br><span class="line">    ll ans, m = <span class="number">1</span>, total, a[<span class="number">12</span>], c[<span class="number">12</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">ex_gcd</span><span class="params">(ll a, ll b, ll &amp;x, ll &amp;y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!b) &#123; x = <span class="number">1</span>;y = <span class="number">0</span>; <span class="keyword">return</span> a; &#125;</span><br><span class="line">        ll res = <span class="built_in">ex_gcd</span>(b, a % b, y, x);</span><br><span class="line">        y -= (a / b) * x;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">china</span><span class="params">(ll *w, ll *r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= total; i++) m *= w[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= total; i++)&#123;</span><br><span class="line">            ll m1 = m / w[i], x, y;</span><br><span class="line">            ll d = <span class="built_in">ex_gcd</span>(m1, w[i], x, y);</span><br><span class="line">            ans = (ans + m1 * x * r[i]) % m;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(ans &lt; <span class="number">0</span>) ans += m;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;total);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= total; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>, &amp;a[i], &amp;c[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld&quot;</span>, <span class="built_in">china</span>(a, c));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> ex_crt &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    ll a[maxn], m[maxn], x, y;</span><br><span class="line">    ll total;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">ex_gcd</span><span class="params">(ll x, ll y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!y) &#123; x = <span class="number">1</span>; y = <span class="number">0</span>; <span class="keyword">return</span> x; &#125;</span><br><span class="line">        ll r = <span class="built_in">ex_gcd</span>(y, x % y);</span><br><span class="line">        ll temp = y; y = x - (x / y) * y; x = temp;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ll a1 = a[<span class="number">1</span>], m1 = m[<span class="number">1</span>];</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">2</span>, total) &#123;</span><br><span class="line">            x = y = <span class="number">0</span>;</span><br><span class="line">            ll a2 = a[i], m2 = m[i];</span><br><span class="line">            ll r = <span class="built_in">ex_gcd</span>(m1, m2);</span><br><span class="line">            <span class="keyword">if</span>((a2 - a1) % r) &#123; <span class="built_in">printf</span>(<span class="string">&quot;-1\n&quot;</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line">            ll t = m2 / r, p = (a2 - a1) / r;</span><br><span class="line">            ll x0 = (p * x % t + t) % t;</span><br><span class="line">            a1 = m1 * x0 + a1;</span><br><span class="line">            m1 = m1 * m2 / r;</span><br><span class="line">            <span class="keyword">if</span>(a1 &lt; <span class="number">0</span>) a1 += m1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, a1 % m1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>, &amp;total);</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) &#123; <span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld&quot;</span>, &amp;m[i], &amp;a[i]); &#125;</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> ac_automaton &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e5</span> + <span class="number">10</span>, maxm = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> num[maxn], temp[maxm];</span><br><span class="line">    <span class="type">int</span> len, total, ans[maxn];</span><br><span class="line">    <span class="type">int</span> child[maxn][<span class="number">30</span>], lost[maxn], sig[maxn], size;</span><br><span class="line">    <span class="type">int</span> queue[maxn], head = <span class="number">1</span>, tail;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> loc = <span class="number">0</span>, s = <span class="built_in">strlen</span>(num + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, s) &#123;</span><br><span class="line">            <span class="type">int</span> to = (num[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(!child[loc][to]) child[loc][to] = ++size;</span><br><span class="line">            loc = child[loc][to];</span><br><span class="line">        &#125;</span><br><span class="line">        sig[id] = loc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">get_lost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, <span class="number">26</span>) <span class="keyword">if</span>(child[<span class="number">0</span>][i]) &#123; queue[++tail] = child[<span class="number">0</span>][i]; &#125;</span><br><span class="line">        <span class="keyword">while</span>(head &lt;= tail) &#123;</span><br><span class="line">            <span class="type">int</span> now = queue[head++];</span><br><span class="line">            <span class="built_in">rep</span>(i, <span class="number">1</span>, <span class="number">26</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(child[now][i]) &#123; lost[child[now][i]] = child[lost[now]][i]; queue[++tail] = child[now][i]; &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123; child[now][i] = child[lost[now]][i]; &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> now = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, len) &#123;</span><br><span class="line">            <span class="type">int</span> to = (temp[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>);</span><br><span class="line">            now = child[now][to];</span><br><span class="line">            ans[now]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">per</span>(i, size, <span class="number">1</span>) ans[lost[queue[i]]] += ans[queue[i]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;total);</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) &#123; <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, num + <span class="number">1</span>); <span class="built_in">update</span>(i); &#125;</span><br><span class="line">        <span class="built_in">get_lost</span>();</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, temp + <span class="number">1</span>); len = <span class="built_in">strlen</span>(temp + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) &#123; <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans[sig[i]]); &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> sam &#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> total, u, v, w, opt;</span><br><span class="line">	ll ans;</span><br><span class="line">	<span class="type">char</span> num[maxn];</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">		<span class="type">int</span> ch[<span class="number">30</span>];</span><br><span class="line">		<span class="type">int</span> len, cnt, lost;</span><br><span class="line">	&#125;state[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line">	<span class="type">int</span> size, last;</span><br><span class="line">	<span class="type">int</span> nxt[maxn &lt;&lt; <span class="number">1</span>], head[maxn &lt;&lt; <span class="number">1</span>], ed[maxn &lt;&lt; <span class="number">1</span>], cur;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line">		<span class="type">int</span> cur = ++size;</span><br><span class="line">		state[cur].len = state[last].len + <span class="number">1</span>;</span><br><span class="line">		state[cur].cnt = <span class="number">1</span>;</span><br><span class="line">		<span class="type">int</span> loc = last;</span><br><span class="line">		<span class="keyword">while</span>(loc != <span class="number">-1</span> &amp;&amp; !state[loc].ch[now]) &#123;</span><br><span class="line">			state[loc].ch[now] = cur;</span><br><span class="line">			loc = state[loc].lost;</span><br><span class="line">		&#125;		</span><br><span class="line">		<span class="keyword">if</span>(loc == <span class="number">-1</span>) state[cur].lost = <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="type">int</span> to = state[loc].ch[now];</span><br><span class="line">			<span class="keyword">if</span>(state[to].len == state[loc].len + <span class="number">1</span>) state[cur].lost = to;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				<span class="type">int</span> clone = ++size;</span><br><span class="line">				state[clone].lost = state[to].lost;</span><br><span class="line">				<span class="built_in">rep</span>(i, <span class="number">1</span>, <span class="number">26</span>) state[clone].ch[i] = state[to].ch[i];</span><br><span class="line">				state[clone].len = state[loc].len + <span class="number">1</span>;</span><br><span class="line">				<span class="keyword">while</span>(loc != <span class="number">-1</span> &amp;&amp; state[loc].ch[now] == to) &#123;</span><br><span class="line">					state[loc].ch[now] = clone;</span><br><span class="line">					loc = state[loc].lost;</span><br><span class="line">				&#125;</span><br><span class="line">				state[cur].lost = state[to].lost = clone;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		last = cur;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = head[now]; i; i = nxt[i]) &#123;</span><br><span class="line">			<span class="built_in">solve</span>(ed[i]);</span><br><span class="line">			state[now].cnt += state[ed[i]].cnt;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(state[now].cnt != <span class="number">1</span>) ans = <span class="built_in">max</span>(ans, <span class="number">1ll</span> * state[now].len * state[now].cnt);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span> </span>&#123; </span><br><span class="line">        nxt[++cur] = head[from]; </span><br><span class="line">        head[from] = cur; </span><br><span class="line">        ed[cur] = to; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, num + <span class="number">1</span>);</span><br><span class="line">		total = <span class="built_in">strlen</span>(num + <span class="number">1</span>);</span><br><span class="line">		state[<span class="number">0</span>].lost = <span class="number">-1</span>;</span><br><span class="line">		<span class="built_in">rep</span>(i, <span class="number">1</span>, total) &#123; <span class="built_in">update</span>(num[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>);	 &#125;</span><br><span class="line">		<span class="built_in">rep</span>(i, <span class="number">1</span>, size) <span class="built_in">add_edge</span>(state[i].lost, i);</span><br><span class="line">		<span class="built_in">solve</span>(<span class="number">0</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> pam &#123;</span><br><span class="line">	<span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="type">char</span> num[maxn];</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">		<span class="type">int</span> ch[<span class="number">30</span>];</span><br><span class="line">		<span class="type">int</span> len, cnt, link;</span><br><span class="line">	&#125;state[maxn];</span><br><span class="line">	<span class="type">int</span> cop[maxn], total, size = <span class="number">1</span>, k, temp, pos, last;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">while</span>(cop[pos] != cop[pos - state[now].len - <span class="number">1</span>]) now = state[now].link;</span><br><span class="line">		<span class="keyword">return</span> now;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line">		cop[++pos] = now;</span><br><span class="line">		<span class="type">int</span> loc = <span class="built_in">get</span>(last);</span><br><span class="line">		<span class="keyword">if</span>(!state[loc].ch[now]) &#123;</span><br><span class="line">			<span class="type">int</span> cur = ++size;</span><br><span class="line">			state[cur].len = state[loc].len + <span class="number">2</span>;</span><br><span class="line">			<span class="type">int</span> to = <span class="built_in">get</span>(state[loc].link);</span><br><span class="line">			state[cur].link = state[to].ch[now];</span><br><span class="line">			state[loc].ch[now] = cur;</span><br><span class="line">			state[cur].cnt = state[state[cur].link].cnt + <span class="number">1</span>;</span><br><span class="line">			temp = cur;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123; temp = state[loc].ch[now]; &#125;</span><br><span class="line">		last = state[loc].ch[now];</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, num + <span class="number">1</span>); total = <span class="built_in">strlen</span>(num + <span class="number">1</span>);</span><br><span class="line">		state[<span class="number">0</span>].link = state[<span class="number">1</span>].link = <span class="number">1</span>;</span><br><span class="line">		state[<span class="number">1</span>].len = <span class="number">-1</span>;</span><br><span class="line">		<span class="built_in">rep</span>(i, <span class="number">1</span>, total) &#123;</span><br><span class="line">			num[i] = (<span class="type">char</span>)(((<span class="type">int</span>)num[i] - <span class="number">97</span> + k) % <span class="number">26</span> + <span class="number">97</span>);</span><br><span class="line">			<span class="built_in">update</span>(num[i] - <span class="string">&#x27;a&#x27;</span> + <span class="number">1</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, k = state[temp].cnt);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> lcs &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> loc[maxn] ,cop[maxn];</span><br><span class="line">    <span class="type">int</span> fro[maxn];</span><br><span class="line">    <span class="type">int</span> total, ans, u, v, w, opt;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> temp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(now &lt;= maxn - <span class="number">5</span>) &#123;</span><br><span class="line">            fro[now] = <span class="built_in">max</span>(fro[now], temp);</span><br><span class="line">            now += <span class="built_in">lowbit</span>(now);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(now) &#123;</span><br><span class="line">            res = <span class="built_in">max</span>(res, fro[now]);</span><br><span class="line">            now -= <span class="built_in">lowbit</span>(now);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        total = <span class="built_in">read_int</span>();</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) &#123;</span><br><span class="line">            u = <span class="built_in">read_int</span>();</span><br><span class="line">            loc[u] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) &#123;</span><br><span class="line">            u = <span class="built_in">read_int</span>();</span><br><span class="line">            cop[i] = loc[u];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) &#123;</span><br><span class="line">            <span class="type">int</span> res = <span class="built_in">get</span>(cop[i]);</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, res + <span class="number">1</span>);</span><br><span class="line">            <span class="built_in">update</span>(cop[i], res + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">write</span>(ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> prufer &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> total, u, v, w, opt;</span><br><span class="line">    <span class="type">int</span> fa[maxn], sig[maxn];</span><br><span class="line">    <span class="type">int</span> loc = <span class="number">1</span>, d[maxn], vis[maxn];</span><br><span class="line">    ll ans;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">fa_prufer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total - <span class="number">1</span>) &#123;</span><br><span class="line">            fa[i] = <span class="built_in">read_int</span>();</span><br><span class="line">            d[i]++;</span><br><span class="line">            d[fa[i]]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) </span><br><span class="line">            <span class="keyword">if</span>(d[i] == <span class="number">1</span>) &#123;</span><br><span class="line">                loc = i;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total - <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span>(d[loc] != <span class="number">1</span>) loc++;</span><br><span class="line">            sig[i] = fa[loc];</span><br><span class="line">            d[loc]--;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; total - <span class="number">1</span> &amp;&amp; (--d[sig[i]]) == <span class="number">1</span> &amp;&amp; sig[i] &lt; loc) &#123;</span><br><span class="line">                sig[i + <span class="number">1</span>] = fa[sig[i]];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total - <span class="number">2</span>) ans ^= (<span class="number">1ll</span> * i * sig[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">prufer_fa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total - <span class="number">2</span>) sig[i] = <span class="built_in">read_int</span>(), vis[sig[i]]++;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!vis[i] &amp;&amp; !loc) loc = i;</span><br><span class="line">            d[i] = vis[i] + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        sig[total - <span class="number">1</span>] = total;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total - <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span>(d[loc] != <span class="number">1</span>) loc++;</span><br><span class="line">            fa[loc] = sig[i];</span><br><span class="line">            d[loc]--;</span><br><span class="line">            <span class="keyword">while</span>(i &lt; total &amp;&amp; (--d[sig[i]]) == <span class="number">1</span> &amp;&amp; sig[i] &lt; loc) &#123;</span><br><span class="line">                fa[sig[i]] = sig[i + <span class="number">1</span>];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total - <span class="number">1</span>) ans ^= (<span class="number">1ll</span> * i * fa[i]); </span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        total = <span class="built_in">read_int</span>();</span><br><span class="line">        opt = <span class="built_in">read_int</span>();</span><br><span class="line">        <span class="keyword">if</span>(opt == <span class="number">1</span>) <span class="built_in">fa_prufer</span>();</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">prufer_fa</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> convex_hull &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> total, u, v, w, opt;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">        <span class="type">double</span> x, y;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">friend</span> <span class="type">double</span> <span class="keyword">operator</span> ^ (node a, node b) &#123; <span class="keyword">return</span> a.x * b.y - a.y * b.x; &#125;</span><br><span class="line">        <span class="keyword">friend</span> <span class="type">double</span> <span class="keyword">operator</span> * (node a, node b) &#123; <span class="keyword">return</span> a.x * b.x + a.y + b.y; &#125;</span><br><span class="line">        <span class="keyword">friend</span> node <span class="keyword">operator</span> + (node a, node b) &#123; <span class="keyword">return</span> node &#123; a.x + b.x, a.y + b.y &#125;; &#125;</span><br><span class="line">        <span class="keyword">friend</span> node <span class="keyword">operator</span> - (node a, node b) &#123; <span class="keyword">return</span> node &#123; a.x - b.x, a.y - b.y &#125;; &#125;</span><br><span class="line">        <span class="keyword">friend</span> <span class="type">bool</span> <span class="keyword">operator</span> &lt; (node a, node b) &#123;</span><br><span class="line">            <span class="keyword">if</span>(a.x == b.x) <span class="keyword">return</span> a.y &lt; b.y;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> a.x &lt; b.x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;dot[maxn];</span><br><span class="line">    <span class="type">int</span> stack[maxn], top;</span><br><span class="line">    <span class="type">double</span> ans;</span><br><span class="line">    <span class="type">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (dot[b] - dot[a]) ^ (dot[c] - dot[a]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">distance</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sqrt</span>((dot[a].x - dot[b].x) * (dot[a].x - dot[b].x) + (dot[a].y - dot[b].y) * (dot[a].y - dot[b].y));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stack[top = <span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        vis[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">2</span>, total) &#123;</span><br><span class="line">            <span class="keyword">while</span>(top &gt;= <span class="number">2</span> &amp;&amp; <span class="built_in">calc</span>(stack[top - <span class="number">1</span>], stack[top], i) &lt; <span class="built_in">double</span>(<span class="number">0</span>)) vis[stack[top--]] = <span class="literal">false</span>;</span><br><span class="line">            stack[++top] = i;</span><br><span class="line">            vis[i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> temp = top;</span><br><span class="line">        <span class="built_in">per</span>(i, total - <span class="number">1</span>, <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span>(top &gt; temp &amp;&amp; <span class="built_in">calc</span>(stack[top - <span class="number">1</span>], stack[top], i) &lt; <span class="built_in">double</span>(<span class="number">0</span>)) vis[stack[top--]] = <span class="literal">false</span>;</span><br><span class="line">            stack[++top] = i;</span><br><span class="line">            vis[i] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, top - <span class="number">1</span>) ans += <span class="built_in">distance</span>(stack[i], stack[i + <span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%.2f\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        total = <span class="built_in">read_int</span>();</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf&quot;</span>, &amp;dot[i].x, &amp;dot[i].y);</span><br><span class="line">        <span class="built_in">sort</span>(dot + <span class="number">1</span>, dot + total + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">solve</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> subsequence_automata &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> num[maxn], cop[maxn];</span><br><span class="line">    <span class="type">int</span> total, len, u, v, w, opt, type, test, limit;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; loc[maxn];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        type = <span class="built_in">read_int</span>(); </span><br><span class="line">        total = <span class="built_in">read_int</span>(); test = <span class="built_in">read_int</span>(); limit = <span class="built_in">read_int</span>();</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) num[i] = <span class="built_in">read_int</span>();</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) loc[num[i]].<span class="built_in">push_back</span>(i);</span><br><span class="line">        <span class="keyword">while</span>(test--) &#123;</span><br><span class="line">            len = <span class="built_in">read_int</span>();</span><br><span class="line">            <span class="built_in">rep</span>(i, <span class="number">1</span>, len) cop[i] = <span class="built_in">read_int</span>();</span><br><span class="line">            <span class="type">int</span> last = <span class="number">0</span>;</span><br><span class="line">            <span class="type">bool</span> jud = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">rep</span>(i, <span class="number">1</span>, len) &#123;</span><br><span class="line">                vector&lt;<span class="type">int</span>&gt;::iterator iter = <span class="built_in">upper_bound</span>(loc[cop[i]].<span class="built_in">begin</span>(), loc[cop[i]].<span class="built_in">end</span>(), last);</span><br><span class="line">                <span class="keyword">if</span>(iter == loc[cop[i]].<span class="built_in">end</span>()) &#123; jud = <span class="literal">false</span>; <span class="keyword">break</span>; &#125;</span><br><span class="line">                <span class="keyword">else</span> last = *iter;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(!jud) <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> lichao_line_segment_tree &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">5e4</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> test, w;</span><br><span class="line">    <span class="type">double</span> u, v;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">        <span class="type">double</span> k, b;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">calc</span><span class="params">(<span class="type">int</span> x)</span> </span></span><br><span class="line"><span class="function">        </span>&#123; <span class="keyword">return</span> k * (x - <span class="number">1</span>) + b; &#125;</span><br><span class="line">    &#125;line[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line">    <span class="type">char</span> opt[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> l, <span class="type">int</span> r, node now)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(now.<span class="built_in">calc</span>(l) &gt;= line[x].<span class="built_in">calc</span>(l) &amp;&amp; now.<span class="built_in">calc</span>(r) &gt;= line[x].<span class="built_in">calc</span>(r)) &#123;</span><br><span class="line">            line[x] = now;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l == r) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span>(now.<span class="built_in">calc</span>(mid) &gt;= line[x].<span class="built_in">calc</span>(mid)) <span class="built_in">swap</span>(now, line[x]);</span><br><span class="line">        <span class="keyword">if</span>(now.<span class="built_in">calc</span>(l) &gt;= line[x].<span class="built_in">calc</span>(l)) <span class="built_in">update</span>(lson, l, mid, now);</span><br><span class="line">        <span class="keyword">if</span>(now.<span class="built_in">calc</span>(r) &gt;= line[x].<span class="built_in">calc</span>(r)) <span class="built_in">update</span>(rson, mid + <span class="number">1</span>, r, now);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">double</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> loc)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="type">double</span> res = line[x].<span class="built_in">calc</span>(loc);</span><br><span class="line">        <span class="keyword">if</span>(loc &lt; mid) <span class="keyword">return</span> <span class="built_in">max</span>(res, <span class="built_in">get</span>(lson, l, mid, loc));</span><br><span class="line">        <span class="keyword">if</span>(loc &gt; mid) <span class="keyword">return</span> <span class="built_in">max</span>(res, <span class="built_in">get</span>(rson, mid + <span class="number">1</span>, r, loc));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        test = <span class="built_in">read_int</span>();</span><br><span class="line">        <span class="keyword">while</span>(test--) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, opt + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span>(opt[<span class="number">1</span>] == <span class="string">&#x27;P&#x27;</span>) &#123;</span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">&quot;%lf %lf&quot;</span>, &amp;u, &amp;v);</span><br><span class="line">                <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, maxn - <span class="number">5</span>, node&#123; v, u &#125;);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                w = <span class="built_in">read_int</span>();</span><br><span class="line">                <span class="type">int</span> temp = <span class="built_in">int</span>(<span class="built_in">get</span>(<span class="number">1</span>, <span class="number">1</span>, maxn - <span class="number">5</span>, w)) / <span class="number">100</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> linear_base &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    ll base[maxn], num[maxn];</span><br><span class="line">    ll ans, total;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">insert</span><span class="params">(ll now)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">per</span>(i, maxn - <span class="number">2</span>, <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!((now &gt;&gt; i) &amp; <span class="number">1</span>)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(!base[i]) &#123;</span><br><span class="line">                base[i] = now;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> now ^= base[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        total = <span class="built_in">read_ll</span>();</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) &#123;</span><br><span class="line">            num[i] = <span class="built_in">read_ll</span>();</span><br><span class="line">            <span class="built_in">insert</span>(num[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">per</span>(i, maxn - <span class="number">2</span>, <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(ans &amp; (<span class="number">1ll</span> &lt;&lt; i)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> ans ^= base[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> line_segment_tree_partition &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span> &#123; <span class="type">int</span> x, y; &#125;line[maxn];</span><br><span class="line">    vector&lt;node&gt; mine[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; time[maxn];</span><br><span class="line">    <span class="type">int</span> total, side, u, v, w, opt, test;</span><br><span class="line">    <span class="type">int</span> fa[maxn], dep[maxn], size[maxn];</span><br><span class="line">    pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; con[maxn];</span><br><span class="line">    <span class="type">int</span> stack[maxn], top;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">find_fa</span><span class="params">(<span class="type">int</span> now)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(fa[now] == now) <span class="keyword">return</span> now;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">find_fa</span>(fa[now]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[x] &lt; dep[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">        fa[y] = x;</span><br><span class="line">        stack[++top] = y;</span><br><span class="line">        size[x] += size[y];</span><br><span class="line">        <span class="keyword">if</span>(dep[x] == dep[y]) dep[x]++, con[y] = <span class="built_in">make_pair</span>(<span class="number">1</span>, size[y]);</span><br><span class="line">        <span class="keyword">else</span> con[y] = <span class="built_in">make_pair</span>(<span class="number">0</span>, size[y]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> loc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(from &lt;= l &amp;&amp; to &gt;= r) &#123; mine[x].<span class="built_in">push_back</span>(line[loc]); <span class="keyword">return</span>; &#125;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(from &lt;= mid) <span class="built_in">update</span>(lson, l, mid, from, to, loc);</span><br><span class="line">        <span class="keyword">if</span>(to &gt; mid) <span class="built_in">update</span>(rson, mid + <span class="number">1</span>, r, from, to, loc);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">solve</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> last = top;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">0</span>, <span class="built_in">int</span>(mine[x].<span class="built_in">size</span>()) - <span class="number">1</span>) &#123;</span><br><span class="line">            node now = mine[x][i];</span><br><span class="line">            <span class="type">int</span> a = <span class="built_in">find_fa</span>(now.x), b = <span class="built_in">find_fa</span>(now.y);</span><br><span class="line">            <span class="keyword">if</span>(a != b) <span class="built_in">merge</span>(a, b);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(l == r) &#123; </span><br><span class="line">            <span class="keyword">if</span>(size[<span class="built_in">find_fa</span>(<span class="number">1</span>)] != total) <span class="built_in">printf</span>(<span class="string">&quot;Disconnected\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;Connected\n&quot;</span>); </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(r &gt; l) &#123;</span><br><span class="line">            <span class="built_in">solve</span>(lson, l, mid);</span><br><span class="line">            <span class="built_in">solve</span>(rson, mid + <span class="number">1</span>, r);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(; top &gt; last; top--) &#123;</span><br><span class="line">            dep[fa[stack[top]]] -= con[stack[top]].first;</span><br><span class="line">            size[fa[stack[top]]] -= con[stack[top]].second;</span><br><span class="line">            fa[stack[top]] = stack[top];</span><br><span class="line">            con[stack[top]] = <span class="built_in">make_pair</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        total = <span class="built_in">read_int</span>(); side = <span class="built_in">read_int</span>();</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, side) line[i].x = <span class="built_in">read_int</span>(), line[i].y = <span class="built_in">read_int</span>();</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) fa[i] = i, size[i] = <span class="number">1</span>, dep[i] = <span class="number">1</span>;</span><br><span class="line">        test = <span class="built_in">read_int</span>();</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, test) &#123;</span><br><span class="line">            opt = <span class="built_in">read_int</span>();</span><br><span class="line">            <span class="built_in">rep</span>(j, <span class="number">1</span>, opt) &#123;</span><br><span class="line">                u = <span class="built_in">read_int</span>();</span><br><span class="line">                time[u].<span class="built_in">push_back</span>(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, side) &#123;</span><br><span class="line">            u = <span class="number">0</span>; v = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">rep</span>(j, <span class="number">0</span>, <span class="built_in">int</span>(time[i].<span class="built_in">size</span>()) - <span class="number">1</span>) &#123;</span><br><span class="line">                v = time[i][j];</span><br><span class="line">                <span class="keyword">if</span>(v == u + <span class="number">1</span>) &#123; u = v; <span class="keyword">continue</span>; &#125;</span><br><span class="line">                <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, test, u + <span class="number">1</span>, v - <span class="number">1</span>, i);</span><br><span class="line">                u = v;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(v != test) <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, test, u + <span class="number">1</span>, test, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">solve</span>(<span class="number">1</span>, <span class="number">1</span>, test);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> tree_chain_splitting &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> total, test, root, mod, u, v, w, opt;</span><br><span class="line">    <span class="type">int</span> num[maxn];</span><br><span class="line">    <span class="type">int</span> dfn[maxn], top[maxn], son[maxn], fa[maxn], size[maxn], dfn_num, dot[maxn], dep[maxn];</span><br><span class="line">    <span class="type">int</span> head[maxn], nxt[maxn &lt;&lt; <span class="number">1</span>], ed[maxn &lt;&lt; <span class="number">1</span>], cur;</span><br><span class="line">    <span class="type">int</span> sum[maxn &lt;&lt; <span class="number">2</span>], tag[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs_one</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> pre)</span> </span>&#123;</span><br><span class="line">        dep[now] = dep[pre] + <span class="number">1</span>;</span><br><span class="line">        size[now] = <span class="number">1</span>;</span><br><span class="line">        fa[now] = pre;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = head[now]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(ed[i] == pre) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">dfs_one</span>(ed[i], now);</span><br><span class="line">            size[now] += size[ed[i]];</span><br><span class="line">            <span class="keyword">if</span>(size[ed[i]] &gt; size[son[now]]) son[now] = ed[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">dfs_two</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> pre, <span class="type">int</span> front)</span> </span>&#123;</span><br><span class="line">        top[now] = front;</span><br><span class="line">        dfn[now] = ++dfn_num;</span><br><span class="line">        dot[dfn_num] = now;</span><br><span class="line">        <span class="keyword">if</span>(son[now]) <span class="built_in">dfs_two</span>(son[now], now, front);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = head[now]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(ed[i] == pre || ed[i] == son[now]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">dfs_two</span>(ed[i], now, ed[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push_up</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123; sum[x] = (sum[lson] + sum[rson]) % mod; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l == r) &#123; sum[x] = num[dot[l]] % mod; <span class="keyword">return</span>; &#125;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(lson, l, mid);</span><br><span class="line">        <span class="built_in">build</span>(rson, mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="built_in">push_up</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">push_down</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tag[x] == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">add_mod</span>(tag[lson], tag[x]);</span><br><span class="line">        <span class="built_in">add_mod</span>(tag[rson], tag[x]);</span><br><span class="line">        <span class="built_in">add_mod</span>(sum[lson], tag[x] * (mid - l + <span class="number">1</span>) % mod);</span><br><span class="line">        <span class="built_in">add_mod</span>(sum[rson], tag[x] * (r - mid) % mod);</span><br><span class="line">        tag[x] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">update</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> from, <span class="type">int</span> to, <span class="type">int</span> temp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt;= from &amp;&amp; r &lt;= to) &#123;</span><br><span class="line">            <span class="built_in">add_mod</span>(tag[x], temp);</span><br><span class="line">            <span class="built_in">add_mod</span>(sum[x], temp * (r - l + <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">push_down</span>(x, l, r);</span><br><span class="line">        <span class="keyword">if</span>(from &lt;= mid) <span class="built_in">update</span>(lson, l, mid, from, to, temp);</span><br><span class="line">        <span class="keyword">if</span>(to &gt; mid) <span class="built_in">update</span>(rson, mid + <span class="number">1</span>, r, from, to, temp);</span><br><span class="line">        <span class="built_in">push_up</span>(x);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">get</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> from, <span class="type">int</span> to)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(l &gt;= from &amp;&amp; r &lt;= to) <span class="keyword">return</span> sum[x];</span><br><span class="line">        <span class="type">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, res = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">push_down</span>(x, l, r);</span><br><span class="line">        <span class="keyword">if</span>(from &lt;= mid) <span class="built_in">add_mod</span>(res, <span class="built_in">get</span>(lson, l, mid, from, to));</span><br><span class="line">        <span class="keyword">if</span>(to &gt; mid) <span class="built_in">add_mod</span>(res, <span class="built_in">get</span>(rson, mid + <span class="number">1</span>, r, from, to));</span><br><span class="line">        <span class="built_in">push_up</span>(x);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> temp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(top[x] != top[y]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dep[top[x]] &lt; dep[top[y]]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">            <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, total, dfn[top[x]], dfn[x], temp);</span><br><span class="line">            x = fa[top[x]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dep[x] &lt; dep[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">        <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, total, dfn[y], dfn[x], temp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(top[x] != top[y]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dep[top[x]] &lt; dep[top[y]]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">            <span class="built_in">add_mod</span>(res, <span class="built_in">get</span>(<span class="number">1</span>, <span class="number">1</span>, total, dfn[top[x]], dfn[x]));</span><br><span class="line">            x = fa[top[x]];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dep[x] &lt; dep[y]) <span class="built_in">swap</span>(x, y);</span><br><span class="line">        <span class="built_in">add_mod</span>(res, <span class="built_in">get</span>(<span class="number">1</span>, <span class="number">1</span>, total, dfn[y], dfn[x]));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span> </span>&#123;</span><br><span class="line">        nxt[++cur] = head[from];</span><br><span class="line">        head[from] = cur;</span><br><span class="line">        ed[cur] = to;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        total = <span class="built_in">read_int</span>(); test = <span class="built_in">read_int</span>();</span><br><span class="line">        root = <span class="built_in">read_int</span>(); mod = <span class="built_in">read_int</span>();</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) num[i] = <span class="built_in">read_int</span>();</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">2</span>, total) &#123;</span><br><span class="line">            u = <span class="built_in">read_int</span>(); v = <span class="built_in">read_int</span>();</span><br><span class="line">            <span class="built_in">add_edge</span>(u, v);</span><br><span class="line">            <span class="built_in">add_edge</span>(v, u);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">dfs_one</span>(root, <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">dfs_two</span>(root, <span class="number">0</span>, root);</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, total);</span><br><span class="line">        <span class="keyword">while</span>(test--) &#123;</span><br><span class="line">            opt = <span class="built_in">read_int</span>();</span><br><span class="line">            <span class="keyword">if</span>(opt == <span class="number">1</span>) &#123; u = <span class="built_in">read_int</span>(); v = <span class="built_in">read_int</span>(); w = <span class="built_in">read_int</span>(); <span class="built_in">add</span>(u, v, w); &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(opt == <span class="number">2</span>) &#123; u = <span class="built_in">read_int</span>(); v = <span class="built_in">read_int</span>(); <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query</span>(u, v)); &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(opt == <span class="number">3</span>) &#123; u = <span class="built_in">read_int</span>(); v = <span class="built_in">read_int</span>(); <span class="built_in">update</span>(<span class="number">1</span>, <span class="number">1</span>, total, dfn[u], dfn[u] + size[u] - <span class="number">1</span>, v); &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123; u = <span class="built_in">read_int</span>(); <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">get</span>(<span class="number">1</span>, <span class="number">1</span>, total, dfn[u], dfn[u] + size[u] - <span class="number">1</span>)); &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> two_sat &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">int</span> maxn = <span class="number">2e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> total, test, a, b, c, d, u, v, w, opt;</span><br><span class="line">    <span class="type">int</span> nxt[maxn &lt;&lt; <span class="number">1</span>], head[maxn &lt;&lt; <span class="number">1</span>], ed[maxn &lt;&lt; <span class="number">1</span>], cur;</span><br><span class="line">    <span class="type">int</span> dfn[maxn &lt;&lt; <span class="number">1</span>], low[maxn &lt;&lt; <span class="number">1</span>], dfn_num, col[maxn &lt;&lt; <span class="number">1</span>], col_num;</span><br><span class="line">    <span class="type">int</span> stack[maxn &lt;&lt; <span class="number">1</span>], top;</span><br><span class="line">    <span class="type">bool</span> jud[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">tarjan</span><span class="params">(<span class="type">int</span> now, <span class="type">int</span> pre)</span> </span>&#123;</span><br><span class="line">        dfn[now] = low[now] = ++dfn_num;</span><br><span class="line">        stack[++top] = now;</span><br><span class="line">        jud[now] = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = head[now]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(ed[i] == pre) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(!dfn[ed[i]]) &#123;</span><br><span class="line">                <span class="built_in">tarjan</span>(ed[i], now);</span><br><span class="line">                low[now] = <span class="built_in">min</span>(low[now], low[ed[i]]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(jud[ed[i]]) low[now] = <span class="built_in">min</span>(low[now], dfn[ed[i]]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(low[now] == dfn[now]) &#123;</span><br><span class="line">            col[now] = ++col_num;</span><br><span class="line">            jud[now] = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">while</span>(stack[top] != now) &#123;</span><br><span class="line">                jud[stack[top]] = <span class="literal">false</span>;</span><br><span class="line">                col[stack[top]] = col_num;</span><br><span class="line">                top--;</span><br><span class="line">            &#125;</span><br><span class="line">            top--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">add_edge</span><span class="params">(<span class="type">int</span> from, <span class="type">int</span> to)</span> </span>&#123;</span><br><span class="line">        nxt[++cur] = head[from];</span><br><span class="line">        head[from] = cur;</span><br><span class="line">        ed[cur] = to;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        total = <span class="built_in">read_int</span>();</span><br><span class="line">        test = <span class="built_in">read_int</span>();</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, test) &#123;</span><br><span class="line">            a = <span class="built_in">read_int</span>(); b = <span class="built_in">read_int</span>();</span><br><span class="line">            c = <span class="built_in">read_int</span>(); d = <span class="built_in">read_int</span>();</span><br><span class="line">            <span class="built_in">add_edge</span>(a + (b ^ <span class="number">1</span>) * total, c + d * total);</span><br><span class="line">            <span class="built_in">add_edge</span>(c + (d ^ <span class="number">1</span>) * total, a + b * total);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, (total &lt;&lt; <span class="number">1</span>)) </span><br><span class="line">            <span class="keyword">if</span>(!dfn[i]) <span class="built_in">tarjan</span>(i, <span class="number">0</span>);</span><br><span class="line">        <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) </span><br><span class="line">            <span class="keyword">if</span>(col[i] == col[i + total]) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;IMPOSSIBLE\n&quot;</span>);</span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;POSSIBLE\n&quot;</span>);</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, total) </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, col[i] &gt; col[i + total]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> ex_bsgs &#123;</span><br><span class="line">    ll a, b, p, k, limit, d, now, c, ans;</span><br><span class="line">    <span class="type">bool</span> jud;</span><br><span class="line"></span><br><span class="line">    unordered_map&lt;ll,ll&gt; cube;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">gcd</span><span class="params">(ll x, ll y)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> !y ? x : <span class="built_in">gcd</span>(y, x % y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ll <span class="title">fast</span><span class="params">(ll x, ll y, ll p)</span> </span>&#123;</span><br><span class="line">        ll res = <span class="number">1</span>, step = x % p;</span><br><span class="line">        <span class="keyword">while</span>(y) &#123;</span><br><span class="line">            <span class="keyword">if</span>(y &amp; <span class="number">1</span>) res = res * step % p;</span><br><span class="line">            step = step * step % p; </span><br><span class="line">            y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res % p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%lld %lld %lld&quot;</span>, &amp;a, &amp;p, &amp;b) &amp;&amp; (a || b || p)) &#123;</span><br><span class="line">            jud = <span class="literal">false</span>;</span><br><span class="line">            cube.<span class="built_in">clear</span>();</span><br><span class="line">            c = <span class="number">1</span>, d = <span class="built_in">gcd</span>(a, p), k = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(b == <span class="number">1</span>) &#123; <span class="built_in">printf</span>(<span class="string">&quot;0\n&quot;</span>); <span class="keyword">continue</span>; &#125;</span><br><span class="line">            <span class="keyword">while</span>(d != <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span>(b % d) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;No Solution\n&quot;</span>);</span><br><span class="line">                    jud = <span class="literal">true</span>;<span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                b /= d; p /= d; c = c * (a / d) % p; k++; d = <span class="built_in">gcd</span>(a, p);</span><br><span class="line">                <span class="keyword">if</span>(b == c) &#123;</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, k);</span><br><span class="line">                    jud = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(jud) <span class="keyword">continue</span>;</span><br><span class="line">            limit = <span class="built_in">ceil</span>(<span class="built_in">sqrt</span>(p));</span><br><span class="line">            now = b;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;= limit; i++) &#123;</span><br><span class="line">                cube[now] = i + <span class="number">1</span>;</span><br><span class="line">                now = now * a % p;</span><br><span class="line">            &#125;</span><br><span class="line">            ll stan = <span class="built_in">fast</span>(a, limit, p);</span><br><span class="line">            now = c; ans = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= limit; i++) &#123;</span><br><span class="line">                now = now * stan % p;</span><br><span class="line">                <span class="keyword">if</span>(cube[now]) &#123;</span><br><span class="line">                    ans = i * limit - cube[now] + <span class="number">1</span> + k;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ans == <span class="number">-1</span>) <span class="built_in">printf</span>(<span class="string">&quot;No Solution\n&quot;</span>);</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, ans);</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> lucas &#123;</span><br><span class="line">	<span class="type">const</span> ll maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line">	</span><br><span class="line">	ll fac[maxn], inv_fac[maxn];</span><br><span class="line">	ll test, u, v, w, opt, mod;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">c</span><span class="params">(ll n, ll m)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(n &lt; m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">return</span> fac[n] * inv_fac[m] % mod * inv_fac[n - m] % mod;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">solve</span><span class="params">(ll n, ll m)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!m) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">c</span>(n % mod, m % mod) * <span class="built_in">solve</span>(n / mod, m / mod) % mod;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> ll <span class="title">fast</span><span class="params">(ll a,ll b)</span> </span>&#123;</span><br><span class="line">		ll res = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span>(b) &#123;</span><br><span class="line">			<span class="keyword">if</span>(b &amp; <span class="number">1</span>) res = res * a % mod;</span><br><span class="line">			a = a * a % mod;</span><br><span class="line">			b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> res % mod;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">Main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		test = <span class="built_in">read_ll</span>();</span><br><span class="line">		<span class="keyword">while</span>(test--) &#123;</span><br><span class="line">			u = <span class="built_in">read_ll</span>();</span><br><span class="line">			v = <span class="built_in">read_ll</span>();</span><br><span class="line">			mod = <span class="built_in">read_ll</span>();</span><br><span class="line">			fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">			<span class="built_in">rep</span>(i, <span class="number">1</span>, mod - <span class="number">1</span>) fac[i] = fac[i - <span class="number">1</span>] * i % mod; </span><br><span class="line">			inv_fac[mod - <span class="number">1</span>] = <span class="built_in">fast</span>(fac[mod - <span class="number">1</span>], mod - <span class="number">2</span>);</span><br><span class="line">			<span class="built_in">per</span>(i, mod - <span class="number">2</span>, <span class="number">0</span>) inv_fac[i] = inv_fac[i + <span class="number">1</span>] * (i + <span class="number">1</span>) % mod;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>, <span class="built_in">solve</span>(u + v, u));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// file();</span></span><br><span class="line">    <span class="comment">// ios::sync_with_stdio(false);</span></span><br><span class="line">    <span class="comment">// srand(time(NULL));</span></span><br><span class="line">	two_sat::<span class="built_in">Main</span>();</span><br><span class="line">    <span class="comment">// fclose(stdin);</span></span><br><span class="line">    <span class="comment">// fclose(stdout);</span></span><br><span class="line">    <span class="comment">// system(&quot;pause&quot;);</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>code</tag>
      </tags>
  </entry>
  <entry>
    <title>test</title>
    <url>/2022/07/26/test/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="6ab9c36a9ff59a95d5f5ff72b0cde6f3bfc8359eece87444dc1895429417ccad">e1bf88382ceaa6b0336d4e64c3c5cba316768c5a6372f09b31b6ec564c6b5f48</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>《周恩来旅日日记》心得体会</title>
    <url>/2022/11/26/%E3%80%8A%E5%91%A8%E6%81%A9%E6%9D%A5%E6%97%85%E6%97%A5%E6%97%A5%E8%AE%B0%E3%80%8B%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/</url>
    <content><![CDATA[<h1 id="《周恩来旅日日记》-1-心得体会"><a href="#《周恩来旅日日记》-1-心得体会" class="headerlink" title="《周恩来旅日日记》$ ^ {[1]}$心得体会"></a>《周恩来旅日日记》$ ^ {[1]}$心得体会</h1><h2 id="写作背景："><a href="#写作背景：" class="headerlink" title="写作背景："></a>写作背景：</h2><p>周恩来以89.72分的优异成绩，在南开学校毕业，在《毕业同学录》中对他做出了“君性温和诚实，最富于感情，挚于友谊，凡朋友及公益事，无不尽力”；“君家贫，处境最艰，学费时不济，而独于万苦千难中多才多艺”，“善演说，能文章，工行书”，“毕业成绩仍属最优”的评价。</p>
<p>南开学校效仿英美教育体系，继续深造理应留学英美等国。校长张伯苓、校董严范孙也是劝说周恩来去英美的。可哀于家境艰难，以及留学日本有官费生的优惠条件，且日语夹带汉字，想来读写方便，且路费便宜，所以时年19岁的周恩来选择在亲友、老师、同学的资助下，于是年9月上旬由天津塔城海轮直抵日本东京。</p>
<p>行前，周恩来给送行的同学题了一首诗，也就是写在《学校日记》（《周恩来旅日日记》）衬页的那首《大江歌罢掉头东》，以壮此行。</p>
<blockquote>
<p>大江歌罢掉头东，</p>
<p>邃密群科济世穷。</p>
<p>面壁十年图破壁，</p>
<p>不酬滔海亦英雄。</p>
<p>​            中华民国七年一月</p>
<p>​            游东周恩来自题于扶桑江户</p>
<p>​                时年十九岁</p>
<p>​                翔宇印</p>
</blockquote>
<p>周恩来留学于东亚高等预备学校，全称是“日华同人共立东亚高等预备学校”，为曾在北京京师法政学堂任教的松本龟次郎先生1913年所创办,是当时日本最大的中国留学生教育机关，在籍学生经常在1000名左右，并有多年超过2000名左右。周恩来在东亚学校学习时的1918年，当时的留学生人数达到2085人，其中奉天178人，吉林69人，山东78人，江苏142人等。学习日文对于周恩来来说十分重要，不仅因为日文是周恩来在日本生活和求学必须具备的能力，是日本大专学校入学考试的重要科目，而且还因为他在南开学校所学的数学、物理、化学等科目都是英文教学的，如果不学习日文，对其他科目的考试也会带来很大的困难（对于曾经熟悉的学术名词都得重新记背）</p>
<p>在日本留学过程中，周恩来准备报考东京高等师范学校和东京第一高等学校（在文章中可以见到，考取这两所学校的过程也给了周恩来信念和思想上的重大转变）。而且如果考取其中的一所，就可以得到官费学习的待遇，这对于家境贫困的周恩来来说是十分具有诱惑力的。</p>
<h3 id="修学-1："><a href="#修学-1：" class="headerlink" title="修学 - 1："></a>修学 - 1：</h3><p><strong>“人要有志气。”我如今按着这句话，立个报恩的志气，做一番事业，以安他们的心，也不枉人生一世。</strong></p>
<h3 id="心得-1："><a href="#心得-1：" class="headerlink" title="心得 - 1："></a>心得 - 1：</h3><p>1918年新年第一天，周恩来用毛笔写下了在《学校日记》第一页上写下了第一天的日记，日记的上边框印有格言“少年立身即从今日起”，下边框印有诗句“闲话更端茶灶熟，新诗分韵地炉红”。</p>
<p>周恩来明确了写这本日记的目的，其一是“等着老年的时候想起幼时的光景，翻一翻这本日记，想着或者有点儿趣味。若是说留着事迹给人家看，这个我是万万不敢想的，亦不愿真够儿有这个事”，其二是周恩来感到自己已经19岁了，但想起从小儿到如今，认为自己一无所成、光阴白过，相比于自己在南开大学时非常喜欢的梁启超来说，自己真的无脸面对身边的人。</p>
<p>经历了7年的日本留学经历，周恩来意识到了时代之下自己应该有的责任，无愧于心，无愧于光阴，无愧于父老乡亲，志气之立，更待何时！</p>
<h3 id="修学-2："><a href="#修学-2：" class="headerlink" title="修学 - 2："></a>修学 - 2：</h3><p><strong>悟则为佛，迷则众生</strong></p>
<p><strong>佛门十戒：杀、盗、淫、两舌、恶口、妄言、绮语、嫉、恚、痴</strong></p>
<p><strong>三十不婚，可以不婚；四十不宦，可以不宦</strong></p>
<p><strong>与我善者为善人</strong></p>
<h3 id="心得-2："><a href="#心得-2：" class="headerlink" title="心得 - 2："></a>心得 - 2：</h3><p>其实从周恩来开篇的第一篇日记就可以看出，周恩来对于佛学的研究是很喜欢的，在定目标时，引用了“佛说报恩为无上”等句子，并且在之后的几天里，周恩来在修学一栏中不断收集佛学的语句，这对于他性格人格的塑造都起到了很深远的影响。</p>
<h3 id="修学-3："><a href="#修学-3：" class="headerlink" title="修学 - 3："></a>修学 - 3：</h3><p><strong>南北东西，鳏寡孤独</strong></p>
<h3 id="心得-3："><a href="#心得-3：" class="headerlink" title="心得 - 3："></a>心得 - 3：</h3><p>一月八日，冷风刺骨，早起进入东亚学校，就收到“八弟”的来信：“八姑父故去！”</p>
<p>周恩来身在海外，猛然间接到这个噩耗，“那时候心中不知是痛是悲，好像是已经没了知觉一般”，八叔父是周恩来生母、嗣母去世后的实际监护人。收到来信，想起了家中的种种，发现自己“鳏寡孤独全都占全了$ ^ {[2]} $”。再想起家中余事，家中一个要紧的男子也没有，后事如何了法？债务天天逼着，钱是没有，一家几口子饭是要吃的，但“当也当尽净了，卖也卖绝了，借是没处借，赊是没处赊”，还有八伯的病，何曾用一个钱去医治？这些事让周恩来在接下来的几天里生出了浓浓的思乡而不得归的愁情——“南望家乡归不得”！</p>
<h3 id="修学-4："><a href="#修学-4：" class="headerlink" title="修学 - 4："></a>修学 - 4：</h3><p><strong>炼铁石心肠，行其心之所安</strong></p>
<h3 id="心得-4："><a href="#心得-4：" class="headerlink" title="心得 - 4："></a>心得 - 4：</h3><p>老师接了周恩来的信件，知道了他日用不充足，便打算每月接济周恩来一些钱，并且得知老师要把事情告诉二伯。对于周恩来来说，心中愧意犹起，想起自己已经惊动的多少朋友，再向国内本就不安的家中打扰，怎敢？想着老师手头也不宽裕，周恩来问心哪能安呀！</p>
<p>因此，周恩来对于好好学习，考上有官费的学校的想法更加恳切！开始打算每天吃两顿饭，借着这个机会废寝忘食，并给下了“人定胜天”的自我激励。</p>
<h3 id="修学-5："><a href="#修学-5：" class="headerlink" title="修学 - 5："></a>修学 - 5：</h3><p><strong>人生三十无奇功，誓把区区七尺还天公</strong></p>
<p><strong>十年以后当思我，举国如狂欲语谁</strong></p>
<h3 id="心得-5："><a href="#心得-5：" class="headerlink" title="心得 - 5："></a>心得 - 5：</h3><p>周恩来实时关注日本的新闻，这让他心中对于政治方面的思考非常有感触。</p>
<p>他认为，现在这个时代情形下，做官的，有几个是真心为国的？在国内，确实爱国的人不少，大体分为两派：一派是服从革命；一派是赞成君主立宪。其虽意愿相同，但主意不同，并且没有合并的想法，留下的便只有互相攻击。周恩来反思认为“激烈派看着稳健派没有大出息，有奴隶性，极力排斥；稳健派看着激烈派暴跳乱骂，毫无建设思想，成事不足，败事有余，也持着反对的主意。”但他们自己真的预备好了吗？一个二个回国之后，还是毫无实力，能做的只有现出原形！</p>
<p>这时，周恩来想起了梁启超的《饮冰室文集》$ ^ {[3]}$中所说的“十年以后当思我，举国如狂欲语谁”，所以留学之事最大的就是需要建立真正立身的根本，去与这个恶劣的社会交战。</p>
<p>进而，周恩来定下了来这里求学的第一件事“炼得铁石心肠、刚硬志气，不为利动、不为势屈”</p>
<p>其实一想，我们所处的时代又何尝不是呢，小到竞争对手之间，很难去坦然接受对方的思想，但其实也没有立好自身的思想之基，知识相信于目前已知的狭隘范围内的了解，根基不稳，终会地动山摇；大到国家与国家之间，自己的文化输出成问题，便全盘遏制国外的文化输入，就连某些高身分的老师也会发出“过圣诞节就是崇洋媚外”的呼声，张贴的东西似乎就是想表达出自己的高修养，自己的意见绝对正确；某些企业也是“响应”国家政策，分不清全球票房跟国内票房，分不清美元与人民币。这种畸形的随从是国家真正想要的吗？我想不是，“取其精华，去其糟泊”互相借鉴学习才是和平时代该有的，诋毁、不分场合的诋毁、无底线的诋毁是可耻的、没有前途的。</p>
<h3 id="修学-6："><a href="#修学-6：" class="headerlink" title="修学 - 6："></a>修学 - 6：</h3><p><strong>人要是把精神放在是处，无处不可以求学问，又何必终日守着课本，叫做求学呢？</strong></p>
<h3 id="心得-6："><a href="#心得-6：" class="headerlink" title="心得 - 6："></a>心得 - 6：</h3><p>周恩来自从来到日本之后，觉得事事都可以用求学的眼光，看日本人的一举一动、一切的行事，以及一切的国情。所谓“知己知彼，百战百胜”，对于一般的留学生来说，看见和日本人要好就说汉奸，但英雄不计常人之议论，尽自己所能，在难得的留学生活中获得更多有用的东西。</p>
<p>另外，通览周恩来的日记，可以发现，在这一年当中，对于每天的气候，他都是用几乎不重复的四字词语进行描述，进而极大地扩展自己的词汇量，这是我们可以学习的地方，通过一件一般人都会将其当作小事的事，多花一点时间将其做精做细，就可以收获到远超这件小事该有属性的效果。</p>
<h3 id="修学-7："><a href="#修学-7：" class="headerlink" title="修学 - 7："></a>修学 - 7：</h3><p><strong>世界无穷愿无尽</strong></p>
<h3 id="心得-7："><a href="#心得-7：" class="headerlink" title="心得 - 7："></a>心得 - 7：</h3><p>经过对日美留学生当下情形的分析，周恩来得出了仁人志士的必要特征——大凡天下之人，有真正本事的，必定是能涵养，能虚心，看定一种事情，应该去做的，就拼命去做，不计利害；不应该做的，便躲着不出头，或是极力反对。</p>
<p>周恩来还对仁人志士的志向做了分析，他认为平常之人，不过是解决温饱问题足矣，但有大志向的人，便想去救国，尽力社会。这两者在不同信念层次的人心中地位相同，对于平常的人来说，吃没有尽，穿没有尽，因而对于国家社会之事，在仁人志士心中亦没有尽、亦没有足！即，真正的志士要不一而足，敢于探索。</p>
<p>但对于社会来说，某些派头的人，装着极其稳重的样子，专排斥激烈党，说他们不成事，自己却假公济私，虽说这两派人都是迎合社会，但稳重党，社会上不知道他是假的。周恩来分析时局，给出断语——这样子的人，已经无处不有了。因此，在这种背道势力一天比一天多的时代，“除旧迎新”的力量也必须一天比一天多！</p>
<h3 id="修学-8："><a href="#修学-8：" class="headerlink" title="修学 - 8："></a>修学 - 8：</h3><p><strong>第一，想要想比现在还新的思想；</strong></p>
<p><strong>第二，做要做比现在最新的事情；</strong></p>
<p><strong>第三，学要学离现在最近的学问。</strong></p>
<p><strong>思想要自由，做事要实在，学问要真切。</strong></p>
<h3 id="心得-8："><a href="#心得-8：" class="headerlink" title="心得 - 8："></a>心得 - 8：</h3><p>二月十一日，农历新年伊始，周恩来想起了家乡的俗语：“大年初一不高兴，一年都晦气”，但满腹的愁情，叫周恩来如何高兴。三思之后，决定抛却以往的不高兴的事儿，一方面遵循家规，另一方面就是展望未来，定下目标！</p>
<p>这一天，周恩来的日记上写着“阴云满天”，但他的志向犹如霹雳斩断愁情，立下了“有如三宝”。自记日记至此两个半月，周恩来的人生感悟大体清晰，他冷静思考周围群体的素质，时代的波动，以找准了自己的方位。</p>
<h3 id="修学-9："><a href="#修学-9：" class="headerlink" title="修学 - 9："></a>修学 - 9：</h3><p><strong>宗教家常说人要信宗教就是“更生”、“重生”。我觉</strong></p>
<p><strong>得我这回大领悟，将从前的全弃去了，另辟“新思想”，求“新学问”，</strong> </p>
<p><strong>做“新事情”，实在是同“重生”、“更生”一样子了</strong></p>
<h3 id="心得-9："><a href="#心得-9：" class="headerlink" title="心得 - 9："></a>心得 - 9：</h3><p>之前在国内的时候，周恩来总忙着学校内的事情，对于1915年创办的《新青年》杂志，并没有什么关注。之后后来，周恩来从天津准备动身的时候，运弟给了他一本《新青年》三卷四号，及到了东京，又从季冲处看见了《新青年》三卷全份，心里越发高兴。</p>
<p>周恩来这意识到了，自己之前所“思”、所“学”、所“行”实在是无一可取，那种茅塞顿开、醍醐灌顶的感觉溢出纸外，就连周恩来这一段时间的“修学”部分大都是关于当代科学和政治领域的先进名词。</p>
<p>周恩来在“风雪残留犹未尽，一轮红日已东升”旁边，画了一个圆圈，表达了自己的喜悦心情。屋外是“风雪交加”“北风凛冽”，他心中的“红日”就是《新青年》提倡之各种主义！“我愿意自今日后为我的‘思想’、‘学问’、‘事业’”去开一个新纪元才好呢！”</p>
<h3 id="修学-10："><a href="#修学-10：" class="headerlink" title="修学 - 10："></a>修学 - 10：</h3><p><strong>毋自欺，精一，寡欲；坚忍精进，预备工夫</strong></p>
<h3 id="心得-10："><a href="#心得-10：" class="headerlink" title="心得 - 10："></a>心得 - 10：</h3><p>“落第”对于这一年的周恩来来说，似乎早已是司空见惯的事情了，就连还没出榜时，就已经不抱希望了，“心定矣”。</p>
<p>对于一同报考东京高等师范学校的好友犹豫是否退学考取东京第一高等学校，然后再上帝国大学，周恩来劝导他说：“不能只顾一时得失，动摇多年的志愿，而应考虑国家的需要和个人在哪方面可能发挥更大作用，以决定取舍。”这也给落第的周恩来坚定“铁杵磨成绣花针”信念的信心，惟精惟一，允执厥中！</p>
<h3 id="修学-11："><a href="#修学-11：" class="headerlink" title="修学 - 11："></a>修学 - 11：</h3><p><strong>日本何尝是褴褛呢，想怕中国不免有些没出息的样子了。举一反三，我想起日本的国民无怪他瞧不起中国人，他的知识实在是从小儿就练出的。中国人一知半解，那能够讲到开通呢。</strong></p>
<h3 id="心得-11："><a href="#心得-11：" class="headerlink" title="心得 - 11："></a>心得 - 11：</h3><p>周恩来在山兄的建议下来到了日比谷公园，在这里，周恩来深切得感受到了中日在20世纪初新青年表现出的巨大差异。无论男女，日本孩子做什么事情，总是含有点教育兴味，在周恩来以为两个女孩子在玩泥巴时，移近才发现实在种草。中国家长、教师一提到日本，便是“东洋褴褛之邦”，但从新一代看来，中国似乎才是褴褛之邦。拯救现状的方法只有一个，那就是翻新中国的思想。</p>
<p>谈到当下，在孩子尚小时，家长们教育孩子的总是溺爱，照顾，仅此而已，而在日本，以及当代很多西方国家，寓教于乐，父母亲自带孩子们感受大自然的神奇，已不足为奇（我印象很深的一次是刷视频的时候，看到了一个国外的孩子摔倒，一声不吭地爬起来，一脸愤怒地锤击地面，打开评论区，尽是“这要是放在中国，家长身上都要掉层皮，孩子泪都得流干了”，真是这样吗？真是这样）。    在当前双减政策下，中国意识到了应试教育的弊端，家长在教育过程中的缺失，想要孩子们真正的激发出创造力，这是好的引导，但在当前的人们固化思想下，这种转变很难得短时间内为广大家长们所接受，就自己来说，虽然我知道这种开发式探索式的教育肯定是好的，但对于我的弟弟，看到他们一、二年级没有考试，没有排名，真的很担心，不知道他们学的怎么样，对于广大的家长朋友们来说更是这样，只要有机会，就会逮着老师问，自己家的孩子在班上成绩如何什么的，真是矛盾，很是矛盾！</p>
<h3 id="修学-12："><a href="#修学-12：" class="headerlink" title="修学 - 12："></a>修学 - 12：</h3><p><strong>霹雳一声中日约，亡奴何必更贪生</strong></p>
<p><strong>一国之强弱，视人民之德行</strong></p>
<p><strong>哲学的思想，科学的能力</strong></p>
<h3 id="心得-12："><a href="#心得-12：" class="headerlink" title="心得 - 12："></a>心得 - 12：</h3><p>自五月二日起，由于中日新约行将成立，此间留学生有全体归国议论，甚至有“破指血书者”，在“大中华民国救国团”的巨大反响下，东京私立十一校商榷对待学生全体休课之事，世故圆滑，用词违心——“吾等诸君之有碍学业，留学之目的中途挫折，不忍旁观，拟速向政府当局交涉，期解诸君忧虑，安诸君之意，而精励诸君之学业也”。而中国留学生爱国热诚之深，快速决断各省代表团归国日期。</p>
<p>同时，周恩来于五月十九日加入新中会，发出了“我们中国所以如此衰弱的缘故，全是因为不能图新，又不能保旧”的入会意见，所以周恩来看见这个“新”字，赶到异常痛快！总结时，周恩来说出了两句要紧的话——“哲学的思想，科学的能力”，即在周恩来看来，中华民族想要存活发展，就必须不断学习，吸收外来文化，文化不进则退！</p>
<p>现在的中国强起来了，但我认为，我们还没有完全做到周恩来所提到的“主动的观察力”、“被动的熏染力”，我们也只是在习主席上台之后才逐渐提升了文化自信，这一切都是一个循序渐进的过程。但总会有一些忧虑在社会之间荡漾，“摆烂”一词近年成为热词，这和上世纪英国出现的尼特族、日本出现的蛰居族很相像，这也就让社会产生了很多关于这一代是否会毁掉之类的讨论，但其实由我看来，这些网民或者所谓的专家都只是浮于表面的即兴谈词，对于青年人之间常挂在嘴边的摆烂，第一点，它或是调侃，或是自嘲，人们之间的目的其实大部分都是一种自我解压的方式，给自己一些正当的空间进行调节；第二点，当它在人与人之间成为一种交流的工具时，当它成为互联网居民互相发的表情包时，当它逐渐成为一个“梗”时，摆烂这个词也就给了青年们一种广义的集体归属感，当他们在劳累过后，与网友说起摆烂，他得到的是一种解脱，一种解闷，投身于一个集体中，在这个集体间，人们都互相体谅，互相打趣，此不失为一好处！</p>
<h3 id="修学-13："><a href="#修学-13：" class="headerlink" title="修学 - 13："></a>修学 - 13：</h3><p><strong>那些拥有最好的家庭、社会、法律、政府，最先进的科学和艺术，最纯洁的信仰，最美好的道德和最优秀的智慧的民族，才是最有份量的民族</strong></p>
<p><strong>滔滔者天下皆是耶</strong></p>
<h3 id="心得-13："><a href="#心得-13：" class="headerlink" title="心得 - 13："></a>心得 - 13：</h3><p>在连续多天的紧密考试之后，周恩来还是意识到了自己成绩应该没望，发出“我们必须鼓足勇气，去面对那些小困难。否则这些小困难就会扩大成大困难”的感想，结合近期留学生归国热潮，中日矛盾，周恩来在低沉的处境中找到了有份量的人民，有份量的民族该有的东西——贯穿在他漫长一生中的自我牺牲精神，这种精神使他更为光荣，出类拔萃。失败的沼泽不会困住冷静的人，在接下来的日子里，周恩来对自己每日鞭策，“还救什么国呢！爱什么家呢！”“矧吾 </p>
<p>双亲已没，娱乐之何求？过渡时期，滔滔者天下皆是耶”，悟出，珍惜时间才是救亡图存的充要出路</p>
<h3 id="终："><a href="#终：" class="headerlink" title="终："></a>终：</h3><p>回国没多久，又得再次去往东京求学，别生父，别慧弟，只身羁旅，孤单单心之极伤，两个月未曾提笔！</p>
<p>从八月二十七日起，直至十月二十五日，周恩来未尝提笔一记。之后的每日修学中，“坐卧不安”“黯然销魂”等记录了周恩来的心理状态，可见其内心家乡与国家种种矛盾交织，思想的进一步羽化冉冉泱漭！</p>
<h3 id="注释："><a href="#注释：" class="headerlink" title="注释："></a>注释：</h3><p><code>[1]</code> 这是一本泛黄的《学校日记》，上面印有“学校日记，中华民国七年阴历岁次戊午，日历依中央观象台历书，上海商务印书馆制”的字样；扉页上“周恩来”的署名，因保存者为了防备反动当局搜查而暴露，只保留“周”字，“恩来”二字及红色印章均已被挖掉或涂抹不清，但页下保有书“翔宇”二字的用印，两封印章均为篆书，红印泥用印。</p>
<p><code>[2]</code> 老大四伯父在东北，膝下无儿女，是“独”；老二是周恩来生父，死了妻子，是“鳏”；现在八伯父去世，八伯母成了“寡”；周恩来过继给老四，是他的十一叔，嗣父母双亡，他成了“孤”。</p>
<p><code>[3]</code>梁任公即梁启超，《饮冰室文集》收录了他的诸多著名文章，如《变法通议》《新民说》《新民议》《爱国论》《少年中国说》《中国不亡论》《意大利建国三杰传》《社会主义论序》《自由书》《敬业与乐业》等等。周恩来在南开读书时，就特别喜欢读梁启超的书和文章，还曾为梁启超的讲演作过笔录，发表在校刊《校风》上。</p>
<h3 id="一些摘抄"><a href="#一些摘抄" class="headerlink" title="一些摘抄"></a>一些摘抄</h3><p><img src="https://s2.loli.net/2022/11/26/zvMfwxE3D29t5Uy.png" alt="图片1.png"></p>
<p><img src="https://s2.loli.net/2022/11/26/8b3rGN1BqJWjDIU.png" alt="图片2.png"></p>
<p><img src="https://s2.loli.net/2022/11/26/UkBixR4hA2CEKHZ.png" alt="图片3.png"></p>
<p><img src="https://s2.loli.net/2022/11/26/cBwLs1Om9dMiq75.png" alt="图片4.png"></p>
<p><img src="https://s2.loli.net/2022/11/26/fsXyztcngwvShYL.png" alt="图片5.png"></p>
<p><img src="https://s2.loli.net/2022/11/26/9JoyBQcud2DsX8L.png" alt="图片6.png"></p>
<p><img src="https://s2.loli.net/2022/11/26/z6aUCRpDo1Q2GMP.png" alt="图片7.png"></p>
<p><img src="https://s2.loli.net/2022/11/26/HM6L8TSdUsvX4Wy.png" alt="图片8.png"></p>
<p><img src="https://s2.loli.net/2022/11/26/CN5eMJF1woDXKmU.png" alt="图片9.png"></p>
<p><img src="https://s2.loli.net/2022/11/26/VQYupWagrZzMTDs.png" alt="图片10.png"></p>
<p><img src="https://s2.loli.net/2022/11/26/8jJeFf4xLUtSlps.png" alt="图片11.png"></p>
<p><img src="https://s2.loli.net/2022/11/26/tU26B4EQKWacyH8.png" alt="图片12.png"></p>
<p><img src="https://s2.loli.net/2022/11/26/4lZmIFqoU28zebu.png" alt="图片13.png"></p>
<p><img src="https://s2.loli.net/2022/11/26/7l4mzXyfYZQHkM9.png" alt="图片14.png"></p>
<p><img src="https://s2.loli.net/2022/11/26/ph754Hvfrwn3dMA.png" alt="图片15.png"></p>
]]></content>
      <tags>
        <tag>BUAA</tag>
      </tags>
  </entry>
  <entry>
    <title>万顷波中得自由</title>
    <url>/2022/11/26/%E4%B8%87%E9%A1%B7%E6%B3%A2%E4%B8%AD%E5%BE%97%E8%87%AA%E7%94%B1/</url>
    <content><![CDATA[<h1 id="疫情之下自由的底线"><a href="#疫情之下自由的底线" class="headerlink" title="疫情之下自由的底线"></a>疫情之下自由的底线</h1><h2 id="生命安全"><a href="#生命安全" class="headerlink" title="生命安全"></a>生命安全</h2><h3 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h3><p>生命安全是疫情防控的价值边界，任何侵害生命安全的“行为自由”都应该受到社会权力的约束。</p>
<h3 id="如"><a href="#如" class="headerlink" title="如"></a>如</h3><p>如果在疫情没有得到有效控制之前盲目发展社会经济，这是对生命的不负责任。只有在生命安全得到优先保障的前提下才可以维护财产安全，才可以谈社会经济发展。某些西方国家奉行新自由主义，在疫情防空中将资本的自由流动与经济发展放到首位，去忽视了生命安全的保障，这是对自由意志基础的损害，实际上是资本逻辑导致的价值错位！</p>
<h3 id="什么是行为自由和意志自由？怎么推出这个结论的？"><a href="#什么是行为自由和意志自由？怎么推出这个结论的？" class="headerlink" title="什么是行为自由和意志自由？怎么推出这个结论的？"></a>什么是行为自由和意志自由？怎么推出这个结论的？</h3><p>​    首先，自由可以分为这两者，行为自由和意志自由。简单来说，意志自由是基于人的精神自发性的自我决断，行为自由是贯彻“意志所欲”的自由。意志自由是目的，而行为自由是实现意志自由的工具性手段。</p>
<p>一方面，作为群居动物，社会会对行为进行一定的控制，社会控制行为的正当性基础在于维护社会秩序的稳定性，而社会始终是以个体构成，因此，社会控制行为要以维护“人”的本体存在位根本目的。</p>
<p>另一方面，意志自由是人之为人的根基，不能被强制。但意志自由的存在并不是无根的，它需要一定的物质基础，而人的生命安全是维护意志自由的首要现实条件。</p>
<p>进而，我们知道，无论在什么社会背景下，疫情也不例外，生命安全是谈自由的底线。</p>
<h2 id="话语责任"><a href="#话语责任" class="headerlink" title="话语责任"></a>话语责任</h2><p>在疫情防控中信息的获取、认知自由主要通过外界，所以，信息公开中应保护人的人格尊严，妥善保护相关人员的基本隐私，且不会扰乱社会秩序，影响他人意志自由。</p>
<h3 id="结论-1"><a href="#结论-1" class="headerlink" title="结论"></a>结论</h3><p>信息自由要以尊重他者与维护公共利益的责任为前提。</p>
<h3 id="如-1"><a href="#如-1" class="headerlink" title="如"></a>如</h3><p>“疫情造谣者”散播的信息只会造成社会恐慌。过度的恐惧会损害人的理性能力,从而影响人的意志自由能力,所以应被惩戒。“疫情吹哨人”基于对他者的尊重和公共利益的责任及时传递信息,增强了公民预防病毒的自觉性与自主性能力,因此获得了言论自由资格。</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>以上就是我们小组关于这次课题的思考与讨论，有什么问题，欢迎大家和我们讨论与指正，希望都能在当今社会的万顷波中找到属于自己的自由</p>
]]></content>
      <tags>
        <tag>BUAA</tag>
      </tags>
  </entry>
  <entry>
    <title>下自成蹊三十载，爆轰闪光铸辉煌</title>
    <url>/2022/11/26/%E4%B8%8B%E8%87%AA%E6%88%90%E8%B9%8A%E4%B8%89%E5%8D%81%E8%BD%BD%EF%BC%8C%E7%88%86%E8%BD%B0%E9%97%AA%E5%85%89%E9%93%B8%E8%BE%89%E7%85%8C/</url>
    <content><![CDATA[<h1 id="下自成蹊三十载，爆轰闪光铸辉煌-3"><a href="#下自成蹊三十载，爆轰闪光铸辉煌-3" class="headerlink" title="下自成蹊三十载，爆轰闪光铸辉煌$ ^ {[3]} $"></a>下自成蹊三十载，爆轰闪光铸辉煌$ ^ {[3]} $</h1><h5 id="杨佳宇轩"><a href="#杨佳宇轩" class="headerlink" title="杨佳宇轩"></a>杨佳宇轩</h5><h5 id="（士嘉书院-227513-22375080）"><a href="#（士嘉书院-227513-22375080）" class="headerlink" title="（士嘉书院 227513 22375080）"></a>（士嘉书院 227513 22375080）</h5><blockquote>
<p>身为一叶无轻重，愿将一生献宏谋</p>
</blockquote>
<p><img src="https://s2.loli.net/2022/11/26/WPcEtbUJIn7uwNF.png" alt="图片4.png"></p>
<h2 id="你想到了什么？"><a href="#你想到了什么？" class="headerlink" title="你想到了什么？"></a>你想到了什么？</h2><p>“面对这样庞大的题目，我不能有另一个选择。一个人的名字，早晚要消失，能把微薄力量融入祖国强盛之中，便足感欣慰。”当这句话填满眼眶时，你，想到了什么？</p>
<p>古人将名留青史作为活过的唯一证据，确实，没有人可以万古长青，但可以有人做到灵魂亘古延绵。然而，于敏先生在面对祖国召唤时，毅然投身到我国核武器研制事业！“对于敏个人而言，这是很大的损失”他的一位老同事如是说到。哪些人能有如此的信念？青年马克思在《青年选择职业时的考虑》$ ^{[4]} $中说到：“如果我们选择了最能为人类而工作的职业，那么，重担就不能把我们压倒。那时我们所享受的就就不是可怜的、有限的、自私的乐趣，我们的幸福将属于千万人。面对我们的骨灰，高尚的人也会洒热泪！”那么，于敏先生甘愿隐姓埋名的精神是否来源于他对祖国、对人类的无私情怀呢，让我们走近于敏先生，领略老先生“身为一叶无轻重，愿将一生献宏谋”的一生。</p>
<h2 id="少怀其志，敢蹑其路"><a href="#少怀其志，敢蹑其路" class="headerlink" title="少怀其志，敢蹑其路"></a>少怀其志，敢蹑其路</h2><p>于老先生出生于1926年8月16日。于老先生的青少年时代是在抗日战争时期的沦陷区度过的，童年亡国奴的屈辱生活给他留下惨痛的记忆，一颗种子似乎蓄势待发。</p>
<p>1944年，于敏考进了北大工学院机电系。但上学后于敏发现，这里的工学院只是把知识告诉学生会用就行了，根本不告诉学生根源。而他却偏偏喜欢沉浸在“纯粹”的理论之中，高深的物理学像一块巨大的磁石吸引着他。1946年于敏先生转到理学院物理系，并将自己的专业方向定为理论物理。他在理论物理方面的天赋很快展现出来，并以惊人的记忆力和领悟力赢得教授们的欣赏，当然，也更加坚定了于老先生攻克物理理论研究的决心。1949年于敏本科毕业。不久，他被慧眼识才的钱三强、彭桓武调到中科院近代物理研究所。这个所1950年才成立，由钱三强任所长，王淦昌和彭桓武任副所长。</p>
<p>1961年1月的一天，即将准备出国留学的于敏先生奉命来到钱三强的办公室。一见到于敏，钱三强就直截了当地说：“经所里研究，请报上级批准，决定让你参加热核武器原理的预先研究，你看怎样”。时间仿佛在此刻驻足停留，心跳声在房间里犹如闷声巨响，于敏先生没有沉默，他说出了那句话——“面对这样庞大的题目，我不能有另一个选择……能把微薄力量融入祖国强盛之中，便足感欣慰。”</p>
<p>郭永怀在和于敏先生见面时说到：“从明天起，谁也不知道你干什么，包括你的家人，他们也许会怀疑，因为你犯了错误被调离了岗位，当一个什么话都不能说的哑巴……”“你来一碗，我也得来一碗；你有，我也得有，人和人之间，国家和国家之间，都一样……什么是底气，我们造的就是底气！”</p>
<h2 id="虽千万难吾往矣"><a href="#虽千万难吾往矣" class="headerlink" title="虽千万难吾往矣"></a>虽千万难吾往矣</h2><p>当时国内很少有人熟悉原子能理论，一切似乎都是从零开始。在研制核武器的权威物理 学家中，于敏是唯一没有留过学的人。不仅人员紧缺，科研小组的粮食供应也只能维持在“有吃”的层面，于敏先生有胃病，曾经因为没有东西填肚子而疼不能忍。唯一能支持他们坚持下去的是他们对理论物理的热情，于敏先生的一句口头禅便是“理论没问题”。</p>
<p>从一张白纸开始，科学家们面临的第一个挑战便是对于测量氚氚反应截面实验选择相信美国期刊的参数还是基于中国的理论，一句“不会错，理论经得起推敲，不能盲目相信美国人”定下了理论物理研究的方向，避免了数亿人民币的损失和三年时间的浪费。</p>
<p>设计了模型后，困难如期而至，从原子弹到氢弹，按照突破原理实验的时间比较，美国人用了七年零三个月，英国四年零三个月，法国八年零六个月，前苏联四年零三个月。主要一个原因就在于计算的繁复。而我们的设备由技术的限制，全国仅有一台每秒万次的电子管计算机，并且95%的时间分配都交给了原子弹的计算，5%的时间分配基本都是在半夜12点之后。“穷人有穷方法”，于敏先生领导小组人员，人手一把计算尺，废寝忘食地计算，倒下的不是个例。</p>
<p>同事问于敏：“我们如此研究，就是为了搞清楚氢弹怎么才能爆炸，等到研究成功了，又永远不希望它爆炸，那我们研究它的目的是什么？”于敏先生瞪大眼睛，双手不禁跟着话语动了起来：“如果我们没有氢弹，别的国家就会肆无忌惮，别的国家的核武器就可以随时随地扔到我们的国土上，这叫核平衡。我们制造核武器，是为了让别的国家的核武器不会爆炸……咱们不发动战争，但要有面对战争的能力和准备，和平求不来，有实力，才能不挨打！咱不欺负别人，也不让别人欺负咱们！”</p>
<p>为了调动大家的积极性，在那个食物短缺的年代，于敏先生拿出自家攒的鸡蛋，给每个有理论突破的同志鸡蛋奖励。</p>
<p>期间，于敏先生曾三次与死神擦肩而过。1969年初，因奔波于北京和大西南之间，也由于沉重的精神压力和过度的劳累，他的胃病日益加重。我国正在准备首次地下核试验和大型空爆热试验，于敏先生参加了这两次试验。当时他身体虚弱，走路都很困难，上台阶要用手帮着抬腿才能慢慢地上去。热试验前，当于敏先生被同事们拉着到小山冈上看火球时，已是头冒冷汗，脸色苍白，气喘吁吁。大家见他这样，赶紧让他就地躺下，给他喂水。过了很长时间，在同事们的看护下，他才慢慢地恢复过来。由于操劳过度和心力交疼，于敏在工作现场几至休克。直到1971年10月，考虑到于敏先生的贡献和身体状况，才特许已转移到西南山区备战的妻子孙玉芹回京照顾。一天深夜，于敏先生感到身体很难受，就喊醒了妻子。妻子见他气喘，赶紧扶他起来。不料于敏突然休克过去，经医生抢救方转危为安。后来许多人想起来都后怕，如果那晚孙玉芹不在身边，也许他后来的一切就都不存在了。出院后，于敏顾不上身体未完全康复，又奔赴祖国西北。由于连年都处在极度疲劳之中，1973年于敏在返回北京的列车上开始便血，回到北京后被立即送进医院检查。在急诊室输液时，于敏先生又一次休克在病床上。</p>
<p>四年中，是科研人员的舍己为公、坚定意志，才使得一篇又一篇的论文交到了钱三强的手里，一个又一个未知的领域被攻克。于敏团队提出研究成果报告69篇，对氢弹的许多基本现象和规律有了更为深刻的认识。</p>
<h2 id="漫漶相连，晨光泱漭"><a href="#漫漶相连，晨光泱漭" class="headerlink" title="漫漶相连，晨光泱漭"></a>漫漶相连，晨光泱漭</h2><p>1964年10月16日，我国第一颗原子弹爆炸成功，周恩来总理代表党中央和国务院下达命令：把氢弹理论研究放首位。同年，于敏先生带领一支小分队赶往上海华东计算机研究所，抓紧时间计算了一批模型，终于发现了热核材料自持燃烧的关键，解决了氢弹原理方案的重要课题，难掩愉悦之情的于敏先生说到：“我们到底牵住了‘牛鼻子’！”。</p>
<p>当即，于敏先生给远在北京的邓稼先打了一个耐人寻味的电话，但由于保密，只能通过他们才能听懂的隐语：“我们几个人去打了一次猎……打上了一只松鼠。”邓稼先听出是好消息：“你们美美地吃了一餐野味？”“不，现在还不能把它煮熟……要留做标本……但我们有新奇的发现，它身体结构特别，需要做进一步的解剖研究，可是……我们人手不够”“好！我立即赶到你那里去”。</p>
<p>年底，于敏先生开始从事核武器理论研究，在氢弹原理研究中提出了从原理到构型的基本完整的设想，在最后算出结果的那一刻，他没有激动，而是让研究人员再算一次，再算一次，再算一次……终于，在他宣布成功的那一刻，身体不能在支撑他，累倒了。</p>
<p><img src="https://s2.loli.net/2022/11/26/xdFbm9ucLkVryPh.png" alt="图片5.png"></p>
<p>1967年6月17日8时整，空军飞行员徐克江驾驶载有氢弹的飞机进入罗布泊空投区。随着指挥员“五，四，三，两，幺，起爆！”的指令，机舱随即打开，氢弹携着降落伞从空中急速落下。弹体降到距地面两十几白多米的高度时，只听一声巨响，碧监的大空随即翻腾起熊熊烈火，传来滚滚的雷鸣声……红色烟尘向空中急剧翻卷，愈来愈大，火球也愈来愈红。火球上方渐渐形成了草帽状云雾，与地面卷起的尘柱形成了巨大的蘑菇云。强烈的光辐射，将距爆心投影点四百米处的钢板铸件烧化，水泥构件的表面被烙;布放在八公里以内的狗、十公里以内的兔子，当场死亡一半;七百米处的轻型坦克被完全破坏，车内动物全部炭化;冲击波把距爆心投影点近三公里、重约五十四吨的火车吹出十八米，近四公里处的半地下仓库被揭去半截，十四公里处的砖房被吹散。科技人员把爆炸当量的数据送上来了――三百三十万吨！</p>
<h2 id="黼蔀黻纪，向阳而生"><a href="#黼蔀黻纪，向阳而生" class="headerlink" title="黼蔀黻纪，向阳而生"></a>黼蔀黻纪，向阳而生</h2><p>数十年默默无闻，于敏却怡然自得。他喜欢诸葛亮，喜欢诸葛亮的“鞠躬尽瘁，死而后已”，更是将诸葛亮的“淡泊以明志，宁静以致远”奉为圭桌。这个内向又安静的科学家，对“宁静”有着自己的理解:“所谓宁静，对一个科学家而言，就是不为物欲所惑，不为权势所屈，不为利害所移，始终保持严格的科学精神。</p>
<p>这份“宁静”，让于敏的身影显得更伟岸。当国家授予他“两弹一星”功勋奖章时，于敏说这是集体的功劳。当人们把“氢弹之父”的称号送给他时，他直言这种称呼不科学:“核武器的研制是集科学、技术、工程于一体的大科学系统，需要多种学科、多方面的力量才能取得现在的成绩，我只是起到了一定的作用，氢弹又不能有好几个‘父亲’。”</p>
<p>完成氢弹之后，于敏先生决心扎根核事业。意识到惯性约束聚变在国防和能源上的重要意义，他立即组织指导了中国核理论研究的开展。1986年初，邓稼先和于敏对世界核武器科学技术发展趋势做了深刻分析，向中央提出加速核试验的建议，加速发展惯性约束聚变研究，并将其列入中国高技术发展计划，使中国的惯性聚变研究进入了新的阶段。</p>
<p>面对这样庞大的题目，我想，于老先生并不是没有其他选择，而是他遵从了内心的神往，毅然选择了核事业。他的名字将刻在神州大地上，融入祖国的强盛中，熠熠生辉！</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><code>[1]</code>电视剧《功勋》<br><code>[2]</code>氢弹功臣于敏小传 人民网[引用日期2014-08-15]</p>
<p><code>[3]</code><a href="https://zhuanlan.zhihu.com/p/375606541">于敏：身为一叶无轻重 愿将一生献宏谋</a></p>
<p><code>[4]</code>于敏，贺流体物理研究所成立五十一周年暨独立建所四十周年题词</p>
<p><code>[5]</code><a href="https://career.cup.edu.cn/news/view/aid/84242/tag/fdhd">《青年在选择职业时的考虑》马克思</a></p>
]]></content>
      <tags>
        <tag>BUAA</tag>
      </tags>
  </entry>
  <entry>
    <title>初始星图</title>
    <url>/2022/10/15/%E5%88%9D%E5%A7%8B%E6%98%9F%E5%9B%BE/</url>
    <content><![CDATA[<h1 id="初始星图"><a href="#初始星图" class="headerlink" title="初始星图"></a>初始星图</h1><h2 id="纸质星图"><a href="#纸质星图" class="headerlink" title="纸质星图"></a>纸质星图</h2><p><strong>纸质星图</strong>主要分为<strong>5种</strong></p>
<script type="math/tex; mode=display">
\begin{cases}

全天星图 \\
四季星图 \\
每月星图 \\
旋转星图 \\
天区图

\end{cases}</script><h3 id="全天星图"><a href="#全天星图" class="headerlink" title="全天星图"></a>全天星图</h3><p>最常见的全天星图将天球分为南北天，分别投影到两个圆上</p>
<p><img src="C:\blog\denerate\source\_posts\初始星图\v2-ca7417c57d89ab041900140ee82e45db_r.jpg" alt=""></p>
<p>另外还有一些全天星图将整个天球投影到一个圆上</p>
<p><img src="C:\blog\denerate\source\_posts\初始星图\v2-a060acacc27c3adc8bf3c8adaeb26171_1440w.webp" alt=""></p>
<p>其可以清楚显示星座相对位置，但天球畸变太严重，只能粗略显示亮恒星位置，因此，实际观测价值不大</p>
<h3 id="四季星图"><a href="#四季星图" class="headerlink" title="四季星图"></a>四季星图</h3><p>四季星图更具有实用意义的星图。最常见的四季星图绘制了某一纬度地区的三月、六月、九月、十二月的月中晚上9时的星空。</p>
<p><img src="C:\blog\denerate\source\_posts\初始星图\v2-915aaac85693d51664e63bb817f95d45_1440w.webp" alt=""></p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>那么为什么只需要知道每个季度中某一天的同一时刻的星空，就可以画出整个星图呢？</p>
<blockquote>
<p>恒星日（地球自转时间） = 23时56分4秒</p>
<p>不同季节的晚上同一时刻看星，星空里出现的星座有所不同。恒星每天提前4分钟出没和中天。就是说，恒星出没和中天的时刻与太阳的出没和中天的时刻是逐日不同的。假定昨天黄昏后7时，牛郎星从东方地平线上升起，那么今天看牛郎星，它在黄昏后6时56分升起;明天则在黄昏后6时52分升起;半月后提前1小时，午后6时就升起了;一个月时于午后5时就升起;一个季度之后，星星出没时间提早了6小时。也就是说，月初黄昏后7时的星空，相当于月中午后6时的星空，也相当于月末（下月月初）午后5时的星空;它又相当于两个月后(第三个月月初）午后3时的星空，……依此类推，它也相当于六个月后月初清晨7时的星空。换句话说，春季黄昏时的星空就是秋季黎明时的星空，冬季黎明时间星空就是秋季子夜时的星空或夏季黄昏时的星空。换一种说法，假若今天19时看到牛郎星在东方地平线附近，在牛郎星西边与牛郎星相距大约90度的大角星在正南方，那么，一个月后同在19时观察星空，我们就会发现大角星已在正南偏西30度的方向;三个月后再在19时观察星空，牛郎星却现现在南方高空中，而大角星则沉落到西北方离地平线很近了。不同月份同一时间星空的形象不同，出现的星座有所变化，因此人们常按春夏秋冬四季把空区分为四季星空。所谓四季星空，就是指每个季节黄昏时候的星空。</p>
</blockquote>
<p>由此，我们可以通过一张四季星图，知道一年之内所有时刻的星空图像！</p>
<h4 id="看图方法"><a href="#看图方法" class="headerlink" title="看图方法"></a>看图方法</h4><blockquote>
<p>注意星图方位标记一般为：上北下南，左东右西</p>
</blockquote>
<p>首先应该注意到这张星图的方位标记:上北下南左东右西。这样，当你将这张星图举过头顶，就可以将四个方位与地理方位完美对应了。如果要观察较低的天体，例如北极星，可以将星图标有“北”的一方朝下竖直放置，这时北方地平线附近的天体就可以与星图上的位置对应起来;如果要观察较高的天体，则可以将星图举过头顶，将星图的四个方位与地理方位对应。</p>
<blockquote>
<p>图中标注的星等：星等一般分为25等，越小，其亮度越大</p>
</blockquote>
<p>另外，这张星图上除了标出了恒星的星等，还标出了一些深空天体。星等采用星点的大小表示，星点 越大，星等越低，恒星越亮；而深空天体则用一些特殊的符号表示。</p>
<h3 id="每月星图"><a href="#每月星图" class="headerlink" title="每月星图"></a>每月星图</h3><p>每月星图与四季星图的使用方法是相同的，只不过在适用时间上略有不同：最常见的每月星图绘制了当月月中晚上9时的星空，同时它也适用于月初的晚上10时和月末的晚上8时。</p>
<p><img src="C:\blog\denerate\source\_posts\初始星图\v2-ab37738eb8ff5965c79b53a92fe5d72b_1440w.webp" alt=""></p>
<h3 id="旋转星图"><a href="#旋转星图" class="headerlink" title="旋转星图"></a>旋转星图</h3><p>旋转星图巧妙的利用了星空的运行原理，使它可以展示每个时刻的星空。</p>
<h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>它通常由内外两个盘组成，内盘中间绘有全天星图的一部分，外圈是日期盘；外盘上绘有时间盘。要使用它，只需要将内盘上当天的日期与外盘上当时的时间对齐即可。</p>
<p><img src="C:\blog\denerate\source\_posts\初始星图\v2-694387a840a24bbf7b30a3e001b24c13_1440w.webp" alt=""></p>
<p><img src="C:\blog\denerate\source\_posts\初始星图\v2-e787e77c10447606dd28f8ddec75d0c4_1440w.webp" alt=""></p>
<p>旋转星图的优点是它可以用于某一纬度带（一般是绘制纬度 ±5∘ ）全年的任何时间。然而它的缺点也很明显：它基本上不能显示除了主要亮星以外的更多信息，而且它是有很大畸变的（注意上图中东西方向的标识在什么位置），所以它的作用比较有限。不过，它也可以直观地显示星空的运行方式</p>
<h3 id="天区图"><a href="#天区图" class="headerlink" title="天区图"></a>天区图</h3><blockquote>
<p>天区图可以说是在“真正的”天文观测中用途最大的星图</p>
</blockquote>
<p>它只显示一小片天区的情况，也正因如此，它可以容纳更多的信息。进而，把涵盖许多天区的天区图编成图册，也就是常用的星图集了。</p>
<p><img src="C:\blog\denerate\source\_posts\初始星图\v2-15134214c1c9836beee16981ad5596ad_1440w.webp" alt=""></p>
<blockquote>
<p>这是一张6等星图，它包含了大量的信息，例如恒星和深空天体的编号、赤道坐标网格、星座边界，等等。在确认了观测目标的大概位置以后，可以使用这样的天区图精确地定位目标天体。</p>
</blockquote>
<h2 id="星图识别基本算法"><a href="#星图识别基本算法" class="headerlink" title="星图识别基本算法"></a>星图识别基本算法</h2><p>星图识别算法大致分为两类</p>
<script type="math/tex; mode=display">
\begin{cases}
子图同构算法 \\
模式识别算法
\end{cases}</script><h3 id="子图同构算法"><a href="#子图同构算法" class="headerlink" title="子图同构算法"></a>子图同构算法</h3><blockquote>
<p>这类算法以星与星之间的角距为边，星为顶点，把观测星图看成是<strong>全天星图的子图</strong>。它们直接或者间接的利用角距，以线段(角距)、三角形、四边形等为基本匹配元素，并按照一定方式组织导航特征表。利用这些基本元素的组合，一旦在全天星图中找到唯一符合匹配条件的区域(子图)，则它就是观测星图的对应匹配。这类算法主要包含多边形算法、三角形算法和匹配组算法等。由于一些星点构成的子图是相同的，这类算法会存在错误匹配的情形，影响其稳定性。</p>
</blockquote>
<p><img src="C:\blog\denerate\source\_posts\初始星图\340e4eb8b43ea8dbd3a60081189c2cf7deb21640.webp" alt=""></p>
<h3 id="模式识别算法"><a href="#模式识别算法" class="headerlink" title="模式识别算法"></a>模式识别算法</h3><blockquote>
<p>这类算法为每颗星构造一个独一无二的特征，即星模式，通常以一定邻域内其他星的几个分布特征来构成。这样，星图识别实质上就是在导航星表中寻找与观测星模式最接近的导航星。这类算法最具代表性的为<strong>栅格算法</strong>。同其他算法相比，栅格算法具备较高识别率，导航星表体积小。</p>
</blockquote>
<p><img src="C:\blog\denerate\source\_posts\初始星图\054056fe1e425d6b9e3db39a11883913e9e50040.webp" alt=""></p>
<h2 id="天文望远镜自动寻星"><a href="#天文望远镜自动寻星" class="headerlink" title="天文望远镜自动寻星"></a>天文望远镜自动寻星</h2><h3 id="①建立坐标系"><a href="#①建立坐标系" class="headerlink" title="①建立坐标系"></a>①建立坐标系</h3><p>借鉴绘制地图的方法，在三维的球面上绘制出一副星图，称为<strong>天球</strong></p>
<p><img src="C:\blog\denerate\source\_posts\初始星图\1.png" alt=""></p>
<p>为其赋予一些基本属性</p>
<h4 id="基本属性"><a href="#基本属性" class="headerlink" title="基本属性"></a>基本属性</h4><p>以<strong>赤道平面</strong>与天球相交形成的大圆作为<strong>基本圆</strong>，称为<strong>天赤道</strong></p>
<p>平行于天赤道的圆称为<strong>赤纬</strong>，由天赤道作为赤纬0°向南北方向度量</p>
<p>地球公转轨道面与天球相交形成的大圆称为<strong>黄道</strong>，黄道与天赤道交与两点，分别是春分和秋分</p>
<p>以地球自转轴作为基本轴，过两个天极的大圆称为<strong>赤经</strong>，以春分点作为0时，沿着天体东升西落的相反方向进行度量。</p>
<p>得到最基本的坐标系，称为<strong>赤道坐标系</strong></p>
<p><img src="C:\blog\denerate\source\_posts\初始星图\2.png" alt=""></p>
<h3 id="②原理"><a href="#②原理" class="headerlink" title="②原理"></a>②原理</h3><p>由于地球自转周期为<strong>23时56分4秒</strong>，所以只需要设置一个起始时，即可推导出任意天体在具体时空中的位置，通常，我们以位于0°经线上的<strong>格林尼治恒星时</strong>作为标准时间，那么，其他地区的恒星时只需要通过经度换算便可计算得出。</p>
<p>为了引入时间变量，我们在赤道坐标系的基础上稍做变更，以天赤道作为<strong>基本圈</strong>，以天极为中心将天区分为24时，这样就能定性描述天体的实时坐标，同时，就得到了<strong>时角坐标系</strong></p>
<p><img src="C:\blog\denerate\source\_posts\初始星图\3.png" alt=""></p>
<p><img src="C:\blog\denerate\source\_posts\初始星图\8.png" alt=""></p>
<p>我们可以看出，在时角坐标系与赤道坐标系中，<strong>天体赤纬相同，而赤经和时角可以通过恒星时进行相互转换</strong></p>
<p><img src="C:\blog\denerate\source\_posts\初始星图\4.png" alt=""></p>
<p>这样一来，我们只需要知道观测地的经纬度和观测时间，以及标准恒星时，就可以通过天体的赤经和赤纬求得天体的具体坐标！</p>
<h3 id="③具体操作"><a href="#③具体操作" class="headerlink" title="③具体操作"></a>③具体操作</h3><p>天文望远镜配备<strong>赤道仪</strong>，其主要跟踪机构为<strong>赤经轴</strong>和<strong>赤纬轴</strong></p>
<p><img src="C:\blog\denerate\source\_posts\初始星图\5.png" alt=""></p>
<p>其可以通过内嵌的MCU模块用于计算天体位置，并驱动两轴上的电机，使用前只需要将赤经轴先对准<strong>天极方向</strong>，使赤经轴和地轴平行，再通过将观测地的经纬度与观测时间作为参量传入MCU，并指定观测天体的赤经赤纬，内置的数据库调用出相关数据并进行计算，即可得出天体的具体坐标，再将坐标数据转换为赤道仪两轴电机需要转动的周期数，即可指向目标。</p>
<p><img src="C:\blog\denerate\source\_posts\初始星图\6.png" alt=""></p>
<h3 id="④误差分析"><a href="#④误差分析" class="headerlink" title="④误差分析"></a>④误差分析</h3><script type="math/tex; mode=display">
\begin{cases}
赤经轴是否严格与自转轴平行 \\
向MCU传入的参量精度是否可靠
\end{cases}</script><p>对于前者，在摆放赤道仪时需要进行极轴的校准</p>
<p>对于后者，通常采用已知天体进行校准，将望远镜先行指向校准星，若校准星未在视野内，则需要通过控制赤道仪手动将校准星移至望远镜视场内，以此时的数据代替原有的计算数据，建立修正后的坐标模型，提高寻星与跟踪的精度（当然也有链接上位机进行更加精确的定位）</p>
<p><img src="C:\blog\denerate\source\_posts\初始星图\7.png" alt=""></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://zhuanlan.zhihu.com/p/59864943?ivk_sa=1024320u">业余天文学入门（四）| 使用星图</a></p>
<p><a href="https://jingyan.baidu.com/article/948f59247dd1ce980ef5f95b.html">星图识别基本方法</a></p>
<p><a href="https://wenku.baidu.com/view/11b5fb00463610661ed9ad51f01dc281e53a5694.html">星空的季节性变化</a></p>
<p><a href="http://www.dljs.net/dlsk/digai/55383.html">时角坐标系</a></p>
<p><a href="https://www.bilibili.com/video/av297575661/">茫茫夜空中，天文望远镜是如何实现自动寻星的？</a></p>
]]></content>
      <tags>
        <tag>BUAA</tag>
      </tags>
  </entry>
  <entry>
    <title>卖情怀？行走在舆论风口浪尖的中国爱国与科幻题材电影</title>
    <url>/2022/11/26/%E5%8D%96%E6%83%85%E6%80%80%EF%BC%9F%E8%A1%8C%E8%B5%B0%E5%9C%A8%E8%88%86%E8%AE%BA%E9%A3%8E%E5%8F%A3%E6%B5%AA%E5%B0%96%E7%9A%84%E4%B8%AD%E5%9B%BD%E7%88%B1%E5%9B%BD%E4%B8%8E%E7%A7%91%E5%B9%BB%E9%A2%98%E6%9D%90%E7%94%B5%E5%BD%B1/</url>
    <content><![CDATA[<h1 id="卖情怀？行走在舆论风口浪尖的中国爱国与科幻题材电影"><a href="#卖情怀？行走在舆论风口浪尖的中国爱国与科幻题材电影" class="headerlink" title="卖情怀？行走在舆论风口浪尖的中国爱国与科幻题材电影"></a>卖情怀？行走在舆论风口浪尖的中国爱国与科幻题材电影</h1><h5 id="杨佳宇轩"><a href="#杨佳宇轩" class="headerlink" title="杨佳宇轩"></a>杨佳宇轩</h5><h5 id="（士嘉书院-227513-22375080）"><a href="#（士嘉书院-227513-22375080）" class="headerlink" title="（士嘉书院 227513 22375080）"></a>（士嘉书院 227513 22375080）</h5><h2 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h2><p>偶然间看到一句评论“凭什么爱国电影给差评就要被喷？给差评就是不爱国吗？这种商业电影就是在卖爱国情怀，在挣钱，在打着爱国旗号卖情怀不知道是悲是喜。”，卖情怀？虽然不敢肯定，但扪心自问，我曾经也厌倦了国产爱国电影，为什么每逢节假日，热榜上总会有几部爱国题材电影？这让我想要去想一想卖情怀的帽子是否能扣在爱国题材电影上。</p>
<p>首先，爱国题材电影内容是什么？这个应该都清楚，以与爱国精神相挂钩的历史事件及人物为主题，反映和传播中国精神，俗称红色题材电影。由此，我们知道爱国题材电影的作用是提高国民的爱国意识，增强国民的精神归属感。</p>
<p>那么，如此正统的，意义上与利益无处挂钩的电影为什么会出现文章开头提到的愤慨评论呢？</p>
<p>第一，我认为，无论是给出差评者还是批判者，本质上都是爱国的，他们只是站的角度不同，在自身的价值观中，赋予给爱国电影需要付出的责任的权重不同。作为差评者，他们点出的差评，不是点在爱国精神或者历史人物上的，他们对电影的批判是中肯的、客观的、倾注自身思考的、建立在自身对电影本身好坏的评价上的，他们有自身的“言论自由”，“点评自由”，他们点出了他们认为不正确的宣扬爱国情怀的方式，所以，他们是知道应该怎么爱国的。同样，对于批判者，他们同样爱国，也许有人会说他们这是明显的“畸形、扭曲式爱国”，但我认为他们只是把自身更大程度上地融入到了电影所反映地历史事件中，他们看待这部电影，就是在看待曾经艰苦但却峥嵘的历史岁月。所以，这两者会有争执，只是因为他们没有换位思考，没有想要走出自己的思想固笼。</p>
<p>第二，这与互联网信息的碎片化、以及电影官方的带节奏有关系。透过一面冰冷的屏幕，你可以看到彼人在说这段话时的语气、表情、动作、心理活动吗？不能。甚之，观看者会强加自身的情绪以及片面理解，以至于误解。同时，在短视频平台日益高涨的流量下，电影宣传的官方账号日益增多，截取电影片段进行过度解读，想要将历史情怀强加到流量和票房这种商业行为上来，以此来将观众（电影观众以及短视频观众）的爱国情怀与票房、点评相挂钩。这合理吗？对于一些“爱国热情过激”的人民群众来说，这不是唤醒爱国热情，这是扭曲爱国情怀的涉及范围！</p>
<p>那么，爱国题材电影的的社会价值应该是怎样的呢？首先，要谈这个价值，我们默认讨论的是剔除掉单纯“卖情怀”的电影。柏拉图在《理想国》中提到了一个概念——每个人天生都有自己独特的特质，而后天的教育就是要最大程度得按照他们得天性，将他们培养称为不同的职业者，比如农民、匠人、战士或者哲学家，然后将他们输送到社会里相应的岗位以实现每个人社会价值的最大化。由此，我们可以得到爱国电影社会价值最重要的一点结论——爱国主义电影是唤醒中国人骨子里流淌的爱国情怀，一次又一次不停地告示着活在这个看似和平年代的人们，要心存善意、心念感恩、及对于先辈的尊重和对历史的铭记。</p>
<p><img src="https://s2.loli.net/2022/11/26/tXKDoGrHWOPLQF8.png" alt="图片1.png"></p>
<p>有了理论基础之后，我们看一下国内票房榜单，可以看到进入中国影史前10的影片中有4部为主旋律电影，其上映时间全部都是近5年。所以不由得想一个问题，为什么红色电影在近些年如此火热？我认为，这可以部分视作中国电影成熟的标志。每个国家的电影都有自己的政治正确，这种政治正确在电影中以要素或者话语形式存在，同时作为一种价值内核内嵌到电影之中。在中国，爱国主义精神是当下中国政治正确最重要的内容之一。成熟的电影市场往往意味着本国的主流电影能够反映本国的社会思潮和价值偏好。例如，《美国狙击手》《萨利机长》是美国的主旋律电影，同样《复仇者联盟》《美国队长》等也体现了美国的价值观。由此观之，可得爱国主义电影叫好又卖座，是主旋律电影主流化的表现，是中国社会主义核心价值观深入人心的表现。</p>
<p>最后，返回这件“差评”事件本身，他们对宣扬爱国题材社会价值有什么启示吗？第一，爱国应该是趋势，国家是应该推动的，是正能量的，是值得去呼吁所有中国人拥有的，其根植于每个人内心的向心力，不是一句卖情怀可以涵盖的，更不是一句是否给差评所能去讨论的。第二，既然市场上存在，并且在高票房市场上不乏用情怀换取利益的行为，我们仍然可以去观看，可以对电影本身进行批判，这一切都是自由的，但一定要注意个人言论所带来的思想激荡是否是对社会发展趋势有害的，另外，不要把个人对于电影的情绪强加于电影背后的历史事件和人物，我认为，这是讨论这个话题的底线。</p>
<p>想到这里，我不禁联想到国内其他类型的电影行业发展趋势，其中令我感概最深的便是近期舆论讨论激烈的以《明日战记》为代表的国产科幻片。</p>
<p>在暑期的重磅大片中，《人生大事》17.12亿，《神探大战》7.12亿，《独行月球》31.02亿，而《明日战记》6.77亿，这个票房乍一看还不错，但是相对于它的成本4.5亿港币，很明显它是最大的输家。</p>
<p>由于上映之前的大量高品质宣传与如今最大输家的参差，争议愈演愈烈，官方便在上映之前的“古天乐的中国科幻梦想”基础上，进行各式各样的宣传，但是，说宣传似乎不太合理，更准确的应该是说“饭圈行为”——首先是卖情怀，从用古天乐的名气吸粉，让古天乐在各大平台进行直播宣传，再到做慈善带来路人缘，然后是古天乐对于中国科幻的支持和所谓的梦想，最后便只剩“卖惨”（古天乐每天宣传很累，但面对观众依旧百分百打起精神，就算在私底下默默擦着眼泪，仍然坚持梦想）。</p>
<p>这让我不由得想，《明日战记》值得更高的票房吗？甚之，它值得现在的票房吗？首先肯定的是，也是唯一肯定的是，这部电影的特效在国内很好。所谓中国首个机甲科幻电影，第一个问题就是剧情太差，这也是观众反应最频繁的一点（这部电影和92年日本动漫《宇宙骑士1》设定以及剧情几乎重叠）。第二点就是导演吴炫辉在预告时宣传的“故事背景设定在一个现实的世界，我们必须从一张白纸开始，创造出一个新的世界，从外星怪物到演员穿的铠甲到装甲车辆等等，我们要创造出令人信服的一切”。事实真的如此吗？无论是古天乐和导演二人对机甲概念的理解，还是场景里和《异形》《哥斯拉》几乎相同的怪物设计，现在回头看这句话感觉吹嘘的成分居多，务实的成分较少。</p>
<p><img src="https://s2.loli.net/2022/11/26/JedWFtDAwBRbMmO.png" alt="图片2.png"></p>
<p>第三点，《明日战记》想融入的元素太多了，宏大叙事爱国情怀它真的具备了吗，从电影中看，地球防卫队，竟然没有组织标志，甚至没有国家的国旗，相较于同期的喜剧电影《独行月球》，在淡化国家概念时也不忘在救援团队成员手臂上贴醒目的中国国旗。</p>
<p><img src="https://s2.loli.net/2022/11/26/vRQCMEr8GOncH7l.png" alt="图片3.png"></p>
<p>科幻电影难道必须通过这些卖观众对于科幻以及对个人的情怀的手段达到卖点吗？这个答案显然是“不”。先看国外，漫威影业是卖情怀吗？他能够将年轻人喜欢的东西转换成他们激动的心情，并历久弥新，沉淀在脑海里，久久回味，仍然激情澎湃，你见过《复仇者联盟4》全球首映的现场！那种激情是无与伦比、史无前例的。再看国内，像《流浪地球》这类被视作中国科幻崛起里程碑的电影它能够将想要表达的、观众们希望看到的在电影中无一遗漏地表现出来，那就是一部成功的科幻电影。</p>
<p>所以我通过近期行走在舆论风口浪尖的爱国题材电影和科幻电影得出一个结论：电影情怀可以承载回忆、成为回忆，但不能成为为盈利的卖点，无论是哪种题材的电影！</p>
<h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><p><a href="https://zhuanlan.zhihu.com/p/265018764">关于最近火热的所谓电影卖爱国情怀论点的一些想法与观点</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/258433503">浅谈爱国主义电影的社会价值</a></p>
<p><a href="https://www.bilibili.com/video/BV1VV4y1s7i2/?spm_id_from=333.337.search-card.all.click">明日战记票房惨淡古天乐落泪面对观众依旧苦笑</a></p>
<p><a href="https://new.qq.com/rain/a/20220820A05QRD00">卖惨，炒情怀，还攻击同期国产电影，古天乐新片比《上海堡垒》还要恶劣</a></p>
<p><a href="https://user.guancha.cn/main/content?id=620194">为什么近几年票房好的中国电影多为爱国主题？</a></p>
]]></content>
      <tags>
        <tag>BUAA</tag>
      </tags>
  </entry>
  <entry>
    <title>小行星撞击防御实验——DART及个人思考</title>
    <url>/2022/11/27/%E5%B0%8F%E8%A1%8C%E6%98%9F%E6%92%9E%E5%87%BB%E9%98%B2%E5%BE%A1%E5%AE%9E%E9%AA%8C%E2%80%94%E2%80%94DART%E5%8F%8A%E4%B8%AA%E4%BA%BA%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<h1 id="小行星撞击防御实验——DART及个人思考"><a href="#小行星撞击防御实验——DART及个人思考" class="headerlink" title="小行星撞击防御实验——DART及个人思考"></a>小行星撞击防御实验——DART及个人思考</h1><h2 id="PART-Ⅰ"><a href="#PART-Ⅰ" class="headerlink" title="PART Ⅰ"></a>PART Ⅰ</h2><h3 id="什么是小行星撞击防御"><a href="#什么是小行星撞击防御" class="headerlink" title="什么是小行星撞击防御"></a>什么是小行星撞击防御</h3><blockquote>
<p> 行星防御（Planetary Defense）即应用一定的技术，以检测小行星或彗星撞击地球的可能性并发出警告，然后防止它们或减轻其可能的影响。</p>
</blockquote>
<p>行星防御涉及寻找和跟踪有撞击地球危险的近地物体。</p>
<p>确定这些物体的特征，以确定其轨道轨迹、大小、形状、质量、组成、旋转动力学和其他参数，以便专家能够确定潜在撞击事件的严重性，警告其时间和潜在影响，并确定减轻影响的手段；以及规划和实施各种措施，以偏转或扰乱与地球发生撞击的物体，或减轻无法防止的撞击的影响。</p>
<p>在地球上可以采取的保护生命和财产的缓解措施包括疏散撞击区域和移动关键基础设施。</p>
<h3 id="为什么要研究主动防御"><a href="#为什么要研究主动防御" class="headerlink" title="为什么要研究主动防御"></a>为什么要研究主动防御</h3><p>在2019年年初，被发现的近地小行星的数量总共超过了19000颗。平均每周增加30个新发现。2016年10月13日达到15,000个里程碑，标志着自2013年以来已知的近地小行星数量增加了50%，当年8月发现的小行星达到10,000个。</p>
<p><img src="C:\blog\denerate\source\_posts\小行星撞击防御实验——DART及个人思考\a4FOUCVKXZlfpG6.webp" alt="96dda144ad3459828a886813746d37a6caef8451.webp"></p>
<p>这些小行星里，有一些似乎对地球不那么“友好”，因为它们的轨道与地球轨道会有交叉的部分，这就意味着其有可能碰撞！</p>
<p>仅以2013年著名的“俄罗斯车里雅宾斯克小行星事件”为例，一颗直径仅15~17米的小行星冲进地球，就在一个人口稀少的城市造成了1491人伤亡。而对于一颗km级别的小行星，其相当于地球发生了一场全球核战争！</p>
<p>为了提前防止这一天的到来，也就应运而生了全球首次深空奔袭撞击小行星的实验——DART</p>
<h3 id="DART目标"><a href="#DART目标" class="headerlink" title="DART目标"></a>DART目标</h3><p>不同于日本的“隼鸟号”和美国之前的“冥王号”小行星采样，也不同于中国“嫦娥2号”和”罗塞塔“号等飞掠，这次美国的DART会直接撞上小行星Dimorphos，其瞬间粉身碎骨，把全部动量传递给小行星变轨（该防御任务不用直接摧毁小行星，当然也没有这个能力），其仅需稍稍改变小行星的运行轨道，使其”失之毫厘，谬以千里“，最大限度改变之后的运行轨迹。在正式防御小行星撞击时，其就可以错过于地球的撞击。而在深空中，一旦错过，也就是永别了！</p>
<p>选择孪生小行星Dimorphos和Didymos的原因是绝对安全，不会将其”推向“地球，且其大小适中，我们对其观测也很完备，可以做到万无一失！</p>
<p><img src="C:\blog\denerate\source\_posts\小行星撞击防御实验——DART及个人思考\IxwaW4GmvlDYJPg.webp" alt="35a85edf8db1cb1341191c34a1cd504593584bcc.webp"></p>
<p>对于此次任务，正常情况下Dimorphos的轨道周期是11.9h，其直径仅160m，飞行环境纯粹，DART撞击可以将这个自身只能1000万倍的小行星速度改变0.4$ ms/s $，但已经能让它的轨道周期变化10min</p>
<blockquote>
<p>DART’s Mission Objectives:</p>
<p>Demonstrate a kinetic impact with Dimorphos.<br>Change the binary orbital period of Dimorphos.<br>Use ground-based telescope observations to measure Dimorphos’ period change before and after impact.<br>Measure the effects of the impact and resulting ejecta on Dimorphos.</p>
</blockquote>
<h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><p><strong>预测轨道：</strong>近地天体研究中心（CNEOS）根据报告给小行星中心的位置计算近地天体的高精度轨道路径，CNEOS为新发现的小行星计算轨道，并对危险小行星相对于地球未来可能的位置进行长期分析，以确定和警告任何撞击危险</p>
<p>（DART并不需要携带科学仪器，事实上也没有时间进行测量，但是我们希望能够得到其撞击的图像以及撞击之后的资料，这就需要不同的观测手段）</p>
<p><strong>远距离观测：</strong>有部署在10余个国家和地区的近20台地面望远镜参加了这次联合观测。与此同时，太空之中的哈勃太空望远镜和詹姆斯韦伯望远镜，小行星探测器Lucy，都把镜头对准了撞击地点。（但是远观并不能提供非常清晰的图像）</p>
<p><img src="C:\blog\denerate\source\_posts\小行星撞击防御实验——DART及个人思考\NE534hHXiJZjs7x.png" alt="无标题-2.png"></p>
<p><strong>近距离观测：</strong>DART自身携带了一个小卫星LICIACube，其携带了两部高清相机，会在撞击完成后的2min45s飞抵现场，记录撞击后的情况。当然，最近距离的肯定是DART自己携带的高清相机了，其在撞击前最后2s拍下了距离小行星最近的也是最清晰的一张图片</p>
<p><img src="C:\blog\denerate\source\_posts\小行星撞击防御实验——DART及个人思考\IXejNZdgSqym8DR.gif" alt="6763579ae83de50601f03f5eb0ef9be1.gif"></p>
<p><img src="C:\blog\denerate\source\_posts\小行星撞击防御实验——DART及个人思考\oBJFrWjVHYaLsye.png" alt="penultimate_dart_0401930049_43695_01_iof_imagedisplay-final.png"></p>
<h3 id="中国”保卫地球“任务"><a href="#中国”保卫地球“任务" class="headerlink" title="中国”保卫地球“任务"></a>中国”保卫地球“任务</h3><blockquote>
<p>DART所测试的只是卫星防御计划的手段之一。另外，还有借助核爆、动能撞击、激光烧蚀、离子束牵引、引力拖拽、质量驱动等主动手段，破坏小行星的结构或者偏转小行星的轨道。</p>
</blockquote>
<p>吴艳华透露，未来中国将组织编制近地小行星防御发展规划等任务，争取在”十四五“末期或者2025、2026年实施一次对某一颗有威胁的小行星进行抵近观测，实施就近撞击。</p>
<h2 id="PART-Ⅱ"><a href="#PART-Ⅱ" class="headerlink" title="PART Ⅱ"></a>PART Ⅱ</h2><h3 id="对深空探测的意义"><a href="#对深空探测的意义" class="headerlink" title="对深空探测的意义"></a>对深空探测的意义</h3><h4 id="探寻生命"><a href="#探寻生命" class="headerlink" title="探寻生命"></a>探寻生命</h4><p>起源于探月工程，再到小天体采样任务，无一不是由人类对宇宙万物的好奇心驱使的。就像是黑夜中的独行者想要找到相互诉说的陪伴。嫦娥玉兔桂花树是古人浪漫的期盼向往，彗星上的有机物是现代人科学的曙光。</p>
<p>人们怀着尊重与自豪向宇宙发出无数次的呐喊，旅行者Ⅰ号携带的黄金唱片，真正得寄托了人们在真空无依得宇宙交流的渴望！唱片包含了55中人类语言，时任联合国秘书长库尔特和时任美国总统卡特的问候，90分钟的声乐集锦，包括地球自然界的各种声音以及27首世界名曲，其中包含了中国的古琴曲《高山流水》，还有115幅影像他，太阳系各行星的图片、人类生殖器图像及说明。</p>
<blockquote>
<p>“这是一份来自一个遥远的小小世界的礼物，上面记载着我们的声音、我们的科学、我们的影像、我们的音乐、我们的思想和感情。我们正努力生活过我们的时代，进入你们的时代。”                                                                        ——时任美国总统卡特</p>
</blockquote>
<p><img src="C:\blog\denerate\source\_posts\小行星撞击防御实验——DART及个人思考\oOVTSU7zX9fLbGv.png" alt="无标题-1.png"></p>
<h4 id="促进科技发展"><a href="#促进科技发展" class="headerlink" title="促进科技发展"></a>促进科技发展</h4><p>虽说太空探索表面仅是促进航空航天技术的发展。但是，航空航天技术总是带领着科技进行变革的，每探索一个未曾涉足的领域，需要的新技术不是一两个突破就可以完成的，而是需要最前沿的科技互相协同并进。</p>
<p>太空探索迫使电子元件小型化，开启了电脑、网际网络、现代电子通讯设备、全球定位系统和微晶片等科技的革命之门。</p>
<p>另外想一想，科技进步是人类区别于世间其他物种的本质特征创造的，推动科技的发展也就是推动了历史车轮的滚滚向前。</p>
<h4 id="提高人类生活质量"><a href="#提高人类生活质量" class="headerlink" title="提高人类生活质量"></a>提高人类生活质量</h4><p>1970年当时身为NASA太空航行中心的科学副总监史都林格博士在写给赞比亚的Mary Jucunda修女的信中谈到了他对太空探索的重要性的理解</p>
<p>修女问道：”在目前地球上还有儿童由于饥饿面临死亡威胁的情况下，为什么还要花费数十亿美元进行飞向火星的航行？“我想这个问题一定不是个例，而是范例的代表。</p>
<p>史都林格博士认为首先，从现在开始暂停所有的太空项目，直到孩子们都吃上饭再说，这种方式并不会比探索星空对于消除饥荒的作用来得大。</p>
<p>显微镜的发明消除了世界上大部分地区肆虐的瘟疫和其他传染性疾病。同理，对于太空项目，可以涉及农业、畜牧业、渔业以及其他大规模生产活动，通过高科技手段，如灌溉管理、肥料的使用、天气预报、产量评估、程序化种植、农田优选农作物调查及收割计划来显著提高土地生产效率。通过人造地球卫星完成这些任务，带来的利益可比每年国会批准给航空航天项目的数十亿来得多</p>
<h4 id="提高一代人的科学素养"><a href="#提高一代人的科学素养" class="headerlink" title="提高一代人的科学素养"></a>提高一代人的科学素养</h4><p><img src="C:\blog\denerate\source\_posts\小行星撞击防御实验——DART及个人思考\xwDUtmvlqseW6pj.png" alt="无标题.png"></p>
<p>这张图来自到达太阳系边缘的旅行者Ⅰ号距离地球60亿千米之外的地方回望地球时拍下的，最著名、也是最震撼的——”黯淡蓝点“。这足以改变我们面对他人和看待地球的方式，我们不会再仅局限于互相猜忌，而是更多地将有限的生命放任与大地长空、远山沧海</p>
<h3 id="对中国深空探测的发展"><a href="#对中国深空探测的发展" class="headerlink" title="对中国深空探测的发展"></a>对中国深空探测的发展</h3><p>了解人类深空探测历史的过程中，大部分视野是被美国占据了，这对于我来说是很大的触动，中国是对这一方面不感兴趣吗，还是……</p>
<p>我们抛开改革开放之前的深空探测历史，对于当代的发展，中国从成绩上来说确实是稳扎稳打，几乎没有失败，这在空天史上是极大的成功，但是正是由于这种头衔，或者可以说是国民的期待以及国情的压力，在新时代的发展中我们不容许失败，人民的热情才会更加高涨，使得中国在航空航天领域一再保守，对于一般团队出于兴趣的空天探索项目都是不会得到资助的，这于美国就相形见绌了，任何有创新、对人类探索有利的项目都可以参与竞争，得到立项支持。</p>
<p>另外，中国给人民的关于航空航天的消息着实太主观了。在网上进行搜索，并不能得到太多客观的对于中国航空航天的评价，甚至对于相关任务的信息都是报道式的主观概论，这对于国民客观了解航空航天工程发展都是不利的。相较于美国，NASA官网可以看到每个任务的大部分信息，让人们真正了解自己想要了解的客观一面。</p>
<p>中国未来深空探测的发展包括建立中国空间站、”保卫地球“小行星防御任务等。这些任务都需要大量的人才，我希望，越来越多的人才能够有施展自己才华，展示自己思想的空间，更多的包容总结，而不是更多程式化的主观限制，也希望能够让国民更多了解中国航空航天事业，让空天梦不属于少部分人，让它扎根进更多人的心中！</p>
<p><img src="C:\blog\denerate\source\_posts\小行星撞击防御实验——DART及个人思考\ZBkvLlPs2aJOw9I.webp" alt="54fbb2fb43166d22767252cddf83fdfd9152d289.webp"></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.zhihu.com/question/26968968/answer/684356472">太空探索让人类获得了哪些实实在在的收益？</a></p>
<p><a href="https://baijiahao.baidu.com/s?id=1743999269597986408&amp;wfr=spider&amp;for=pc">“保卫地球”行星防御计划将迎首次撞击测试，能不能行得通？</a></p>
<p><a href="https://baijiahao.baidu.com/s?id=1745200909710413989&amp;wfr=spider&amp;for=pc">主动防御！人类航天器首次深空奔袭撞击小行星</a></p>
<p><a href="https://dart.jhuapl.edu/">Double Asteroid Redirection Test</a></p>
<p><a href="https://www.nasa.gov/planetarydefense/dart/dart-news">DART in the News</a></p>
]]></content>
      <tags>
        <tag>BUAA</tag>
      </tags>
  </entry>
  <entry>
    <title>星图研究——子图同构Ullmann算法</title>
    <url>/2022/11/25/%E6%98%9F%E5%9B%BE%E7%A0%94%E7%A9%B6%E2%80%94%E2%80%94%E5%AD%90%E5%9B%BE%E5%90%8C%E6%9E%84Ullmann%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<span id="more"></span>
<h1 id="星图研究——子图同构Ullmann算法"><a href="#星图研究——子图同构Ullmann算法" class="headerlink" title="星图研究——子图同构Ullmann算法"></a>星图研究——子图同构Ullmann算法</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>​    为了在全天星图中找到想要识别的星体，如果仅凭肉眼，是很难实现的，那么我们就需要寻求计算机的帮助，设计高效的算法来进行精准快速的匹配。也就应运而生了两种主要的算法</p>
<script type="math/tex; mode=display">
\begin{cases}
子图同构算法 & Subgraph & isomorphism & problem \\
模式识别算法 & Pattern & recognition & algorithms
\end{cases}</script><p>目前图同构常用算法大概有：</p>
<blockquote>
<p>Ullmann算法、VF算法、VF2算法、vf2x算法</p>
</blockquote>
<p>这里我们主要研究子图同构算法中的Ullmann算法！</p>
<p><img src="https://s2.loli.net/2022/11/26/1MDkmJEfiq2xRhy.webp" alt="340e4eb8b43ea8dbd3a60081189c2cf7deb21640.webp"></p>
<h2 id="问题性质"><a href="#问题性质" class="headerlink" title="问题性质"></a>问题性质</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p><img src="https://s2.loli.net/2022/11/26/jkmTFVhrPWuOMyd.png" alt="无标题-2.png"></p>
<h4 id="P类问题（Polynomial-Problem）"><a href="#P类问题（Polynomial-Problem）" class="headerlink" title="P类问题（Polynomial Problem）"></a>P类问题（Polynomial Problem）</h4><p>P类问题是指<strong>一类能够用确定性算法在多项式时间内求解的判定问题</strong>。</p>
<p>（对于某些非正式的定义中，我们可以把那些在多项式时间内求解的问题也称为P类问题）</p>
<p> <code>for example:</code><strong>矩阵乘法</strong>就是一个P类问题，其时间复杂度为$ \mathcal{O}(n ^ 3) $</p>
<h4 id="NP类问题（Non-deterministic-Polynomial-Problem）"><a href="#NP类问题（Non-deterministic-Polynomial-Problem）" class="headerlink" title="NP类问题（Non-deterministic Polynomial Problem）"></a>NP类问题（Non-deterministic Polynomial Problem）</h4><p>NP类问题分为猜测和验证过程。NP问题是指不能再多项式时间内解决或者不确定能不能在多项式时间内解决，但可以在多项式时间内验证一个解的问题。</p>
<p>其也可以理解为，可在多项式时间内猜出一个解的问题。比如，在某个题中，找一个解很难，但验证一个解很容易。</p>
<p><code>for example:</code><strong>商旅性问题</strong>（TSP，Traveling Salesman Problem）的判定就是一个NP类问题，其时间复杂度$ \mathcal{O}(n) $</p>
<h4 id="NP-complete问题（NP-complete-problem）"><a href="#NP-complete问题（NP-complete-problem）" class="headerlink" title="NP-complete问题（NP-complete problem）"></a>NP-complete问题（NP-complete problem）</h4><p>我们判定一个问题D是NP-complete问题的条件：</p>
<p><code>(1)</code>D属于NP类问题</p>
<p><code>(2)</code>NP中的任何问题都可以在多项式时间内转化为D</p>
<p><strong>证明方法</strong>：必须找到一个已知的NPC问题可以转化为当前问题D，则当前问题D为NPC问题（也就相当于一种数学归纳法）</p>
<p><code>for example:</code><strong>集团决策问题</strong>就是一个NP-complete问题。</p>
<h4 id="NP-hard问题（NP-hard-problem）"><a href="#NP-hard问题（NP-hard-problem）" class="headerlink" title="NP-hard问题（NP-hard problem）"></a>NP-hard问题（NP-hard problem）</h4><p>一个问题如果满足条件<code>(2)</code>但不满足条件<code>(1)</code>，那就称之为NP-hard问题</p>
<p><code>for example:</code>在某些任意大得<strong>棋盘游戏</strong>中走出必胜策略，就是一个NP-hard问题。另外，<strong>Hamilton回路问题</strong>，<strong>最大团问题</strong>也是NP-hard问题。</p>
<h3 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h3><p>P类问题随着数据规模增大，算法消耗时间会以常数或者线性关系增长，不会爆炸增长。</p>
<p>NP类问题、NP-complete问题，可能会随着数据规模增大，算法消耗时间成指数级爆炸增长</p>
<p><strong>线性增长（多项式时间复杂度）</strong>，如$ \mathcal{O}(1) \ \mathcal{O}(n) \ \mathcal{O}(\log(n)) \ \mathcal{O}(n ^ a) $</p>
<h2 id="子图同构问题"><a href="#子图同构问题" class="headerlink" title="子图同构问题"></a>子图同构问题</h2><h3 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h3><p>对于两张图$ H = (V <em> H, E </em> H) $和$ G = (V <em> G, E </em> G) $，如果存在一个单射$ f : V <em> H \rightarrow V $，如果$  \forall E(u, v) \in E </em> H $，有$ E(f(u), f(v)) \in E_G $，则称图$H$是$G$的子图</p>
<p><img src="https://s2.loli.net/2022/11/26/ixj5KBZlCh8gsU2.png" alt="无标题-1.png"></p>
<h3 id="问题性质-1"><a href="#问题性质-1" class="headerlink" title="问题性质"></a>问题性质</h3><p>结论：子图同构问题是NP-complete问题</p>
<p>即，NP中任何问题都可以在多项式时间复杂度内转化为子图同构问题。</p>
<h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>我们的证明肯定是围绕一个已知的NP-complete问题展开（当然也可以先证明它是一个NP问题，再证明它是一个NP-hard问题以此来得到NP-complete问题），比如以集团决策问题为基础。</p>
<p><img src="https://s2.loli.net/2022/11/26/3Ts4iflne8jCtg2.png" alt="无标题.png"></p>
<h4 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h4><p>设集团决策问题输入图为<code>G(v,e)</code>，如果<code>G</code>中包含一个大小为<code>k</code>的完全图，那么判定为<code>true</code>。</p>
<p>我们令<code>G1</code>为<code>k</code>个顶点的完全图，<code>G2</code>为<code>G(v,e)</code>，易知，$ k \leq n $（其中<code>n</code>为<code>G2</code>中顶点数，<code>k</code>为<code>G1</code>完全图中顶点数），从<code>G</code>中生成这两张图需要的时间：$ \mathcal{O}(k ^ 2) = \mathcal{O}(n ^ 2) $，以及边的$ edge = {n \choose k} = \frac{k \times (k - 1)}{2} $，所以仅需要在多项式时间复杂度内就可以创建出两个子图。进一步，如果<code>G1</code>为<code>G2</code>的子图同构，那么<code>G</code>中也就有大小为<code>k</code>的完全图，所以如果集团决策问题判定为<code>true</code>，那么该问题在多项式时间下对应的子图同构问题也判定为<code>true</code>，反之亦然。</p>
<p>综上所述，子图同构算法为NP-complete问题！</p>
<h3 id="Ullmann算法思路"><a href="#Ullmann算法思路" class="headerlink" title="Ullmann算法思路"></a>Ullmann算法思路</h3><p>这里，我们使用Ullmann算法解决问题</p>
<p>Ullmann算法的基本思路是：设<code>H</code>为子图，<code>G</code>为被匹配图，尝试用邻接矩阵将两张图存下来，之后枚举不同的映射，将<code>H</code>图中映射到<code>G</code>中的点及其附属的边抽离出来得到点数与<code>H</code>相等的图<code>C</code>，再判断是否满足$ \forall E(u, v) \in H \ s.t \ E(f(u), f(v)) \in C $则改映射<code>f</code>判定为<code>true</code></p>
<p>综上，实现该算法的步骤大致分为：枚举映射，判断结果</p>
<h4 id="枚举映射"><a href="#枚举映射" class="headerlink" title="枚举映射"></a>枚举映射</h4><h5 id="定理①"><a href="#定理①" class="headerlink" title="定理①"></a>定理①</h5><hr>
<blockquote>
<p>一个映射<code>f</code>是合法映射的必要条件是$ \forall u \in H，d(u) \leq d(f(u)) $</p>
</blockquote>
<hr>
<p>我们可以将输入的两个图用邻接矩阵$ M <em> A \ M </em> B $来存储，并记录每个点的度数，通过判断$ d(u) \leq d(f(u)) $，我们可以得到一个$ k \times n $的矩阵$M$。</p>
<h5 id="定理②"><a href="#定理②" class="headerlink" title="定理②"></a>定理②</h5><hr>
<blockquote>
<p>用邻接矩阵表示一个映射<code>f</code>，其满足的必要条件是每一行有一个<code>1</code>，且每一列至多一个<code>1</code></p>
</blockquote>
<hr>
<p>通过映射矩阵$M _ x$的定义方式，我们很容易得到这个结论</p>
<p>故，我们可以得到枚举的策略：</p>
<p><strong>递归构造映射矩阵$ M _ x $</strong></p>
<p>递归行数$i$，对于每一行，枚举列$j$，如果$ M<em>{i, j} = true $，则可以将映射矩阵的当且位置$ M</em>{x, i, j} $设为<code>true</code>，之后递归到下一行。</p>
<p>递归终止信息是当前递归$ i &gt; k $，此时便开始进行映射矩阵<code>f</code>的判断</p>
<p>当递归会当前行$i$时，将$ M _ {x, i, j} $回退到<code>false</code>，循环进入下一列，以此类推。</p>
<h4 id="判断结果"><a href="#判断结果" class="headerlink" title="判断结果"></a>判断结果</h4><p>判断过程我们之前已经提到过了，通过一定的矩阵运算得到从<code>G</code>中剥离出来的仅含有<code>H</code>中点的状态矩阵$ M _ c $</p>
<h5 id="定理③"><a href="#定理③" class="headerlink" title="定理③"></a>定理③</h5><hr>
<blockquote>
<p>$ M <em> c = M </em> x (M <em> x M </em> B) ^ T $</p>
</blockquote>
<hr>
<p>证明：</p>
<p>以便我们理清这个变换过程，首先需要明确每个矩阵以及每个过程中能够得到的矩阵的几何含义</p>
<p>$ M <em> {x, i, j} $表示的是$ M </em> x $矩阵第<code>i</code>行，第<code>j</code>列，其状态<code>1(true)/0(false)</code>表示图<code>H</code>的标号为<code>i</code>的点是否映射到图<code>G</code>中的标号为<code>j</code>的点。其是一个$ k \times n $的矩阵</p>
<p>$ M <em> {B, i, j} $表示的是$ M </em> B $矩阵第<code>i</code>行，第<code>j</code>列，其状态<code>1(true)/0(false)</code>表示<code>G</code>中标号为<code>i</code>的点和标号为<code>j</code>的点之间是否有边。其是一个$ n \times n $的矩阵</p>
<p>对于第一步</p>
<p>这两者相乘得到一个$ k \times n $的矩阵，其第<code>i</code>行，第<code>j</code>列为<code>true</code>当且仅当中图<code>H</code>中<code>i</code>映射到<code>G</code>中的<code>k</code>，并且<code>G</code>中<code>k</code>和<code>j</code>之间有边。所以，得到的$ M <em> x M </em> B $矩阵就是一个将<code>G</code>中的被映射顶点编号改为<code>H</code>中映射顶点编号的图，其状态<code>1(true)/0(false)</code>即<code>H</code>中的<code>i</code>映射到<code>G</code>中之后是否和<code>j</code>有边</p>
<p>接下来我们进行下一步</p>
<p>将得到的矩阵进行转置，则其第<code>i</code>行，第<code>j</code>列，状态<code>1(true)/0(false)</code>表示<code>G</code>中点<code>i</code>是否和<code>H</code>中的<code>j</code>映射后的点有边。其是一个$ n \times k $的矩阵</p>
<p>那么两个相乘得到一个$ k \times k $的矩阵，其第<code>i</code>行，第<code>j</code>列为<code>true</code>当且仅当图<code>H</code>中<code>i</code>映射到<code>G</code>中的<code>k</code>，并且<code>G</code>中的<code>k</code>与映射之前图<code>H</code>中的<code>j</code>有边。所以得到的矩阵$ M <em> x (M </em> x M <em> B) ^ T $就是将点从<code>G</code>中剥离出来的图<code>C</code>的邻接矩阵，且点编号和<code>H</code>中相同，也就是需要的$ M </em> c $</p>
<p>证毕！</p>
<hr>
<p>之后便可以通过判断是否满足$ \forall M <em> {A, i, j} = true $有$ M </em> {c,i, j} = true $来记录符合条件的映射矩阵了！</p>
<h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>（由于子图同构为NP-complete问题，目前不知道是否存在多项式时间复杂度算法）</p>
<p>最差情况为映射矩阵$M$几乎填满，此时递归时间复杂度为$ \mathcal{O}(n !) $</p>
<p>对于每次判断需要进行矩阵乘法，时间复杂度为$ \mathcal{O}(n ^ 3) $</p>
<p> 所以整体的时间<strong>复杂度为$ \mathcal{O}(n ! \ n ^ 3) $</strong></p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// By DeNeRATe 杨佳宇轩</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> de(x) cerr &lt;&lt; #x &lt;&lt; <span class="string">&quot; = &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> rep(i, a, b) for(int i = a; i &lt;= b; i++)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> per(i, a, b) for(int i = a; i &gt;= b; i--)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> maxn = <span class="number">12</span>, maxm = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123; <span class="comment">// 用结构体封装</span></span><br><span class="line">    <span class="type">int</span> squ[maxn][maxn]; <span class="comment">// 关系矩阵</span></span><br><span class="line">    <span class="type">int</span> cnt[maxn]; <span class="comment">// 图中每个点的度数</span></span><br><span class="line">    <span class="type">int</span> row, line; <span class="comment">// 矩阵的行列</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">clean</span><span class="params">()</span> </span>&#123; <span class="built_in">rep</span>(i, <span class="number">1</span>, row) <span class="built_in">rep</span>(j, <span class="number">1</span>, line) &#123; squ[i][j] = <span class="number">0</span>; &#125; &#125; <span class="comment">// 初始化矩阵为零矩阵</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> istream &amp; <span class="keyword">operator</span> &gt;&gt; (istream &amp;is, node &amp;temp) &#123; <span class="comment">// 结构体重载流输入</span></span><br><span class="line">        <span class="type">int</span> u, v;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Please input the number of points in the graph\n&quot;</span>);</span><br><span class="line">        cin &gt;&gt; temp.row; temp.line = temp.row; <span class="comment">// 先输入当前图的点数，之后形成一个deg = 点数的矩阵</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Then please input the edge relationship of the graph with \&quot;0 0\&quot; as the end of the order\n&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123; <span class="comment">// 输入每一条边，顺便记录每点度数，且形成邻接矩阵</span></span><br><span class="line">            cin &gt;&gt; u &gt;&gt; v;</span><br><span class="line">            <span class="keyword">if</span>(!u || !v) <span class="keyword">break</span>;</span><br><span class="line">            temp.squ[u][v] = temp.squ[v][u] = <span class="number">1</span>;</span><br><span class="line">            temp.cnt[u]++; temp.cnt[v]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span> &lt;&lt; (ostream &amp;os, <span class="type">const</span> node &amp;temp) &#123; <span class="comment">// 结构体重载流输出，将矩阵按格式输出</span></span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, temp.row) &#123; <span class="built_in">rep</span>(j, <span class="number">1</span>, temp.line)</span><br><span class="line">            cout &lt;&lt; temp.squ[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">friend</span> node <span class="keyword">operator</span> * (node a, node b) &#123; <span class="comment">// 结构体中重载乘法为矩阵乘法</span></span><br><span class="line">        node temp;</span><br><span class="line">        temp.row = a.row, temp.line = b.line;</span><br><span class="line">        temp.<span class="built_in">clean</span>();</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, temp.row) <span class="built_in">rep</span>(j, <span class="number">1</span>, temp.line) &#123;</span><br><span class="line">            <span class="built_in">rep</span>(k, <span class="number">1</span>, a.line) </span><br><span class="line">                temp.squ[i][j] += a.squ[i][k] * b.squ[k][j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> node <span class="title">trans</span><span class="params">()</span> </span>&#123; <span class="comment">// 矩阵的转置操作</span></span><br><span class="line">        node temp;</span><br><span class="line">        temp.<span class="built_in">clean</span>(); temp.row = line; temp.line = row;</span><br><span class="line">        <span class="built_in">rep</span>(i, <span class="number">1</span>, temp.row) <span class="built_in">rep</span>(j, <span class="number">1</span>, temp.line) &#123;</span><br><span class="line">            temp.squ[i][j] = squ[j][i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;sta, ed, tr, now; </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">sta为匹配图</span></span><br><span class="line"><span class="comment">ed为原图，被匹配图</span></span><br><span class="line"><span class="comment">tr为极大映射关系矩阵</span></span><br><span class="line"><span class="comment">now为临时映射矩阵</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">vector&lt;node&gt; res; <span class="comment">// 存放满足条件的映射矩阵</span></span><br><span class="line"><span class="type">bool</span> jud[maxn]; <span class="comment">// 判断临时映射矩阵now中当前列是否已经有了1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The first matrix is the subgraph and the second is the matched graph\n\n&quot;</span>);</span><br><span class="line">    <span class="built_in">Sleep</span>(<span class="number">5000</span>); <span class="comment">// 等待5000ms（5s）</span></span><br><span class="line">    cin &gt;&gt; sta &gt;&gt; ed; <span class="comment">// 输入这两个图，转化为邻接矩阵</span></span><br><span class="line">    tr.row = sta.row; tr.line = ed.line;</span><br><span class="line">    now.row = sta.row; now.line = ed.line; <span class="comment">// 映射矩阵规格赋值</span></span><br><span class="line">    <span class="built_in">rep</span>(i, <span class="number">1</span>, sta.row) <span class="built_in">rep</span>(j, <span class="number">1</span>, ed.line) </span><br><span class="line">        <span class="keyword">if</span>(sta.cnt[i] &lt;= ed.cnt[j]) </span><br><span class="line">        tr.squ[i][j] = <span class="number">1</span>; <span class="comment">// 如果sta中某点度数小于ed中某点度数则tr极大映射矩阵当前位置为true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    node temp = now * (now * ed).<span class="built_in">trans</span>(); <span class="comment">// 生成仅由sta中的点组成的ed子图</span></span><br><span class="line">    <span class="built_in">rep</span>(i, <span class="number">1</span>, sta.row) <span class="built_in">rep</span>(j, <span class="number">1</span>, sta.line) </span><br><span class="line">        <span class="keyword">if</span>(sta.squ[i][j] &amp;&amp; !temp.squ[i][j]) <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 进行判断，满足sta中每一条边temp都有</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">void</span> <span class="title">generate</span><span class="params">(<span class="type">int</span> dep)</span> </span>&#123; <span class="comment">// 每行选取一个1，且每列至多选取一个1</span></span><br><span class="line">    <span class="keyword">if</span>(dep &gt; tr.row) &#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>()) res.<span class="built_in">push_back</span>(now); <span class="comment">// 如果这个映射矩阵生成了，那么就用check()函数来进行判断</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">rep</span>(j, <span class="number">1</span>, tr.line) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!tr.squ[dep][j] || jud[j]) <span class="keyword">continue</span>;</span><br><span class="line">        now.squ[dep][j] = <span class="number">1</span>;</span><br><span class="line">        jud[j] = <span class="literal">true</span>;</span><br><span class="line">        <span class="built_in">generate</span>(dep + <span class="number">1</span>);</span><br><span class="line">        now.squ[dep][j] = <span class="number">0</span>;</span><br><span class="line">        jud[j] = <span class="literal">false</span>; <span class="comment">// 复原，以便枚举到下一个映射矩阵</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="comment">// 整体递归处理</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">init</span>(); <span class="comment">// 初始化函数</span></span><br><span class="line">    <span class="built_in">generate</span>(<span class="number">1</span>); <span class="comment">// 生成所有情况的映射关系，进行判断</span></span><br><span class="line">    <span class="keyword">if</span>(!res.<span class="built_in">size</span>()) &#123; <span class="comment">// 如果没有满足条件的子图同构的映射</span></span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;no mapping relationships\n&quot;</span>; </span><br><span class="line">        <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;The mapping relationships are as follows\n&quot;</span>);</span><br><span class="line">    <span class="built_in">rep</span>(i, <span class="number">0</span>, res.<span class="built_in">size</span>() - <span class="number">1</span>) &#123; <span class="comment">// 输出每个满足条件的映射关系矩阵</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%dth:\n&quot;</span>, i);</span><br><span class="line">        cout &lt;&lt; res[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// for an idea：连上esp32 将这个图用OLED输出出来，感觉不错，哈哈哈</span></span><br><span class="line"><span class="comment">//时间复杂度：O(deg! * deg ^ 3) 大概1s可处理8个点连成的完全图</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">示例：</span></span><br><span class="line"><span class="comment">3</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment">4</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">1 3</span></span><br><span class="line"><span class="comment">2 3</span></span><br><span class="line"><span class="comment">2 4</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">0 0</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="算法在星图中的应用"><a href="#算法在星图中的应用" class="headerlink" title="算法在星图中的应用"></a>算法在星图中的应用</h2><p>​    在实际应用中，算法直接或间接利用角距、以线段、三角形、四边形等为基本匹配元素，并按照一定方式组织导航特征表。利用这些基本元素的组合，一旦在全天星图中找到唯一符合匹配条件的区域（子图），则它就是观测星图的对应匹配。具体的，大概以多边形算法、三角形算法、匹配组算法等。</p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://blog.csdn.net/Carve104/article/details/125249112">【简述】【图】P类问题、NP类问题、NP完全问题和NP难问题</a></p>
<p><a href="https://blog.csdn.net/weixin_42066990/article/details/118359432">P问题、NP问题、NPC问题、NPH问题详解</a></p>
<p><a href="https://blog.csdn.net/chichoxian/article/details/52746232">子图同构问题与Ullmann Algorithm 算法（一）</a></p>
<p><a href="https://www.imangodoc.com/79033.html">证明子图同构问题是NP完全的</a></p>
<p><a href="https://www.imangodoc.com/98827.html">证明集团决策问题是NP完全的</a></p>
]]></content>
      <tags>
        <tag>BUAA</tag>
      </tags>
  </entry>
  <entry>
    <title>民用航空与导航技术</title>
    <url>/2022/10/18/%E6%B0%91%E7%94%A8%E8%88%AA%E7%A9%BA%E4%B8%8E%E5%AF%BC%E8%88%AA%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h1 id="民用航空与导航技术"><a href="#民用航空与导航技术" class="headerlink" title="民用航空与导航技术"></a>民用航空与导航技术</h1><h2 id="一-卫星导航出现之前，飞机如何导航飞行？"><a href="#一-卫星导航出现之前，飞机如何导航飞行？" class="headerlink" title="一.卫星导航出现之前，飞机如何导航飞行？"></a>一.卫星导航出现之前，飞机如何导航飞行？</h2><h3 id="1-天文导航"><a href="#1-天文导航" class="headerlink" title="1.天文导航"></a>1.天文导航</h3><p>全美航空1594航班机长萨伦伯格在他的传记《最高职责》中说，他飞横贯美国大陆的航线如此之多，以至于在晚上飞行时，只要操纵飞机以使某个星座中某个星星对准驾驶舱风挡玻璃的特定位置，他就能一路飞到目的地。波音737—300，还有相当种类的飞机都在驾驶舱设有观星窗，估计也是这个用途。</p>
<h3 id="2-看地标"><a href="#2-看地标" class="headerlink" title="2.看地标"></a>2.看地标</h3><blockquote>
<p>当时飞行员都是看着地标飞，比如公路啦，河流啦，这样导航在短途航线还凑合。后来美国开通了一条连通东西海岸的航线送邮件，问题就来了，这么远的航线，飞行员也记不住路啊，所以常常飞着飞着就飞丢了，这可咋办呢？</p>
<p>美国国会一咬牙，就修建了一条横跨美国的箭头带，每个箭头21米多长，黄颜色，旁边还竖着一座燃气灯，飞行员在天上的时候，就一直顺着箭头的方向飞，等看到下一个箭头，就调整方向。所以那时候飞行员除了开飞机，还要不停的伸出脑袋找地面上的箭头。如果找不着，那就只有哭着骂F**k了…</p>
</blockquote>
<p><img src="C:\blog\denerate\source\_posts\民用航空与导航技术\1.webp" alt=""></p>
<h3 id="3-惯性导航"><a href="#3-惯性导航" class="headerlink" title="3.惯性导航"></a>3.惯性导航</h3><p>惯性导航（inertial navigation） 通过测量飞行器的<a href="https://baike.baidu.com/item/加速度/3764?fromModule=lemma_inlink">加速度</a>，并自动进行积分运算，获得飞行器瞬时速度和瞬时位置数据的技术。组成<a href="https://baike.baidu.com/item/惯性导航系统/2286423?fromModule=lemma_inlink">惯性导航系统</a>的设备都安装在运载体内，工作时不依赖外界信息，也不向外界辐射能量，不易受到干扰，是一种自主式导航系统。</p>
<h3 id="4-自动定向机"><a href="#4-自动定向机" class="headerlink" title="4.自动定向机"></a>4.自动定向机</h3><h4 id="①NDB（无方向性信标）-ADF（自动方位搜寻器）"><a href="#①NDB（无方向性信标）-ADF（自动方位搜寻器）" class="headerlink" title="①NDB（无方向性信标） + ADF（自动方位搜寻器）"></a>①NDB（无方向性信标） + ADF（自动方位搜寻器）</h4><h5 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h5><p>NDB向360°方向吸引各路的ADF，飞机上的ADF感受到吸引，就会知道NDB相对于飞机的方位角。通过两台的NDB确定两条直线，也就确定了飞机的位置。</p>
<p><img src="C:\blog\denerate\source\_posts\民用航空与导航技术\2.webp" alt=""></p>
<h5 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h5><p>容易安装</p>
<h5 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h5><p>最大误差有时回达到10°左右 ； 传送上的误差（e.g. 到了夜间，由于电离层所反射的空间波增加，此外，打雷伴随的空电影响也较大，常会造成误差）</p>
<h4 id="②VOR（甚高频全向信标）-DME（distance-measuring-equipment，测距机）（无线电导航）"><a href="#②VOR（甚高频全向信标）-DME（distance-measuring-equipment，测距机）（无线电导航）" class="headerlink" title="②VOR（甚高频全向信标） + DME（distance measuring equipment，测距机）（无线电导航）"></a>②VOR（甚高频全向信标） + DME（distance measuring equipment，测距机）（无线电导航）</h4><h5 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h5><p>VOR向360°空间发射两个信号，一个是基准信号，一个是相对于基准信号有“相变”的信号，从0~360°，相变依次增加，飞机上的设备收到这两个信号，一对比，就可以知道自己相对于VOR的方向。配合DME进行距离测量，就可以唯一确定飞机的位置</p>
<p><img src="C:\blog\denerate\source\_posts\民用航空与导航技术\3.webp" alt=""></p>
<p>当然，也可以单独使用3台DME</p>
<p>方法一：确定3个圆，公共交点就是飞机位置</p>
<p><img src="C:\blog\denerate\source\_posts\民用航空与导航技术\4.webp" alt=""></p>
<p>方法二：双曲定位</p>
<p><img src="C:\blog\denerate\source\_posts\民用航空与导航技术\5.webp" alt=""></p>
<h2 id="二-北斗系统相较GPS"><a href="#二-北斗系统相较GPS" class="headerlink" title="二.北斗系统相较GPS"></a>二.北斗系统相较GPS</h2><h3 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h3><p><strong>近期目标：</strong>到2021年底，基本实现北斗系统通用航空低空空域定位及监视应用，完成北斗系统运输航空器追踪监控。</p>
<p><strong>中期目标：</strong>到2025年底，全面实现北斗系统通用航空定位、导航与监视应用，基本完成北斗星基增强系统运输航空定位导航应用，全面推动北斗系统运输航空导航及监视应用，实现大型无人机混合空域运行典型场景应用。<br><strong>远期目标：</strong>到2035年底，<strong>构建以北斗系统为核心的，与GPS等其他星座兼容互操作的双频多星座GNSS技术应用体系</strong>，逐步实现北斗系统民航行业应用“全覆盖、可替代”，为运输、通用航空及无人驾驶航空器飞行提供精确完好、安全可靠的导航服务，全面提升民航安全水平、空域容量、运行效率和服务能力，为新时代民航强国发展提供强大技术支撑，进一步推动北斗全球民航应用。</p>
<h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><h4 id="1-三频信号"><a href="#1-三频信号" class="headerlink" title="1.三频信号"></a>1.三频信号</h4><p><strong>北斗</strong>使用的是<strong>三频信号</strong>，<strong>GPS</strong>使用的是<strong>双频信号</strong>，这是北斗的后发优势。虽然GPS从2010年5月28日发射了第一颗三频卫星，但等到GPS卫星全部老化报废更换为三频卫星还好几年。这几年就是北斗的优势期。<strong>三频信号可以更好的消除高阶电离层延迟影响，提高定位可靠性，增强数据预处理能力，大大提高模糊度的固定效率</strong>。而且如果一个频率信号出现问题，可使用传统方法利用另外两个频率进行定位，提高了定位的可靠性和抗干扰能力。<strong>北斗是全球第一个提供三频信号服务的卫星导航系统</strong>。</p>
<h4 id="2-有源定位及无源定位"><a href="#2-有源定位及无源定位" class="headerlink" title="2.有源定位及无源定位"></a>2.有源定位及无源定位</h4><p>有源定位就是接收机自己需要发射信息与卫星通信，无源定位不需要。北斗一代的有源定位，<strong>有源定位技术</strong>只要<strong>两颗卫星</strong>就可以完成定位，但需要<strong>信息中心DEM</strong>（数字高程模型）数据库支持并参与解算。它在北斗二代上被保留下来，但不作为主要的定位方式。而北斗二代使用的是<strong>无源定位</strong>，和GPS是一样的，<strong>不需要信息中心参与解算</strong>，有源定位则作为补充功能。</p>
<p>这个功能的<strong>好处</strong>是当你观测的<strong>卫星质量很差，数量较少</strong>时（理论上，无源定位至少要4颗卫星才能解算 XYZ 和时间四个未知参数，实际需要的更多），仍然<strong>可以定位</strong>。这个功能对于紧急情况会比较有用，比如在山谷中，观测条件非常差，能知道大概位置也是非常重要的。坏处是在战争中会暴露你的位置信息。</p>
<h4 id="3-短报文通信服务"><a href="#3-短报文通信服务" class="headerlink" title="3.短报文通信服务"></a>3.短报文通信服务</h4><p>这个是<strong>中国卫星导航的原创功能</strong>，并且非常实用。08年汶川地震的时候，震区唯一的通讯方式就是北斗一代。这一特色功能毫不意外在二代中保留下来。但是这个功能也是有容量限制的，所以并<strong>不适合作为日常通信功能</strong>，而是作为<strong>紧急情况通信</strong>比较合适。基于这个功能，北斗还有一个好处是，不但能知道<strong>我在哪</strong>，还能让<strong>别人知道你在哪</strong>。这个功能有利于求救。</p>
<h4 id="4-境内监控"><a href="#4-境内监控" class="headerlink" title="4.境内监控"></a>4.境内监控</h4><p>卫星定位系统一般由三部分组成：<strong>空间星座部分</strong>，<strong>地面监控部分</strong>和<strong>用户接收机部分</strong>。其中，地面地面监控部分又由三大部分组成：<strong>监控站</strong>，<strong>主控站</strong>，<strong>注入站</strong>。</p>
<p><strong>GPS系统</strong>在全球建 5个监控站，1个主控站和3个注入站以保证卫星运行，这些站都设在美国国土上，并且在<strong>全球分布很均匀</strong>。包括美洲大陆的美国本土，太平洋的关岛和夏威夷、印度洋的迭哥枷西亚以及大西洋的阿森松群岛。<strong>中国</strong>没法把监控站建到全球，所以中国在设计北斗系统时必须考虑到，地面监控部分<strong>只建在中国境内</strong>，就能够保证整个系统的正常运行。在境外建站也不是不可以，只是就算建了，也只起到提高精度的作用，绝对不能作为控制功能。这本来是北斗的劣势，境内监控是被逼出来的，没有其他选项，但现在成了<strong>北斗的安全优势</strong>，不用受制于其他国家。</p>
<h4 id="5-分布开通"><a href="#5-分布开通" class="headerlink" title="5.分布开通"></a>5.分布开通</h4><blockquote>
<p>GPS必须整个系统建成后才能使用。目前北斗的14颗在轨卫星使用了<strong>5颗地球静止轨道（GEO）卫星，5颗倾斜地球同步轨道（IGSO）卫星，4颗中高度圆轨道（MEO）卫星</strong>。北斗的星座方案来之不易，许院士说当时有几个方案参与竞争，光是方案的修改论证就持续了整整三年，最后确定的这个方案不敢说没有缺点，但绝对是所有方案里最好的一个。</p>
</blockquote>
<p>北斗卫星导航系统在这个创新的空间星座支持下，仅仅发射了16颗卫星，就于2012年12月27日在亚太地区正式开通运行。这有利于加快北斗的商用进程，有利于对后续的系统做进一步改进，有利于加快北斗产业链的成熟。毕竟北斗的最大市场肯定是中国嘛，先让北斗系统在<strong>亚太地区</strong>发展几年，让芯片成熟几年，想推广到全球的时候也会相对容易。而且亚太地区的卫星利用效率肯定也更高，更值得优先投资。</p>
<h4 id="6-其他"><a href="#6-其他" class="headerlink" title="6.其他"></a>6.其他</h4><p><strong>亚太地区定位精度高</strong></p>
<p><strong>促进整个制造业升级</strong></p>
<p>——GPS芯片这么好用，我们<strong>北斗系统的芯片</strong>更应努力进步</p>
<p>——北斗精度不够高很大一部分原因是中国的<strong>原子钟</strong></p>
<h2 id="三-北斗系统在民航中的作用"><a href="#三-北斗系统在民航中的作用" class="headerlink" title="三.北斗系统在民航中的作用"></a>三.北斗系统在民航中的作用</h2><h3 id="1-在飞机航线路线规划"><a href="#1-在飞机航线路线规划" class="headerlink" title="1.在飞机航线路线规划"></a>1.在飞机航线路线规划</h3><p>如果路基导航条件有限，无法搭建地面导航台，就会影响记载导航的服务功能，无法让导航系统按照飞行路线飞行。因此，将北斗卫星导航系统应用在民航导航系统中，可以打破地面导航对机载导航的限制，提高航空领域的利用率。</p>
<h3 id="2-在飞机进离场的RNP精密导航功能"><a href="#2-在飞机进离场的RNP精密导航功能" class="headerlink" title="2.在飞机进离场的RNP精密导航功能"></a>2.在飞机进离场的RNP精密导航功能</h3><p>RNP技术是利用飞机自身搭载的导航设备和全球卫星定位系统引导飞机起降的技术。飞行员不需要依靠地面导航设施就能按照精准的定位轨迹进行飞行，即便在能见度很低的情况下，也可以实现精准着陆，提高飞机飞行的安全性和精准性，降低我国航空公司由于天气原因导致飞机航班延误和返航的现象，提高飞机飞行效率</p>
<h3 id="3-在飞机仪表着陆系统（ILS）"><a href="#3-在飞机仪表着陆系统（ILS）" class="headerlink" title="3.在飞机仪表着陆系统（ILS）"></a>3.在飞机仪表着陆系统（ILS）</h3><p>又称盲降系统。地面导航系统发射两束无线电信号指引飞机向下滑行和向航道航行，帮助飞机建立一条由跑道向空中飞行的虚拟路径（之前讲过）</p>
<h2 id="四-如何增强"><a href="#四-如何增强" class="headerlink" title="四.如何增强"></a>四.如何增强</h2><p>（地基增强系统和星基增强系统都随时全球主流卫星导航系统的“补充”）<br>卫星导航系统可以通过接收装置收到4颗及以上的导航卫星信号时，计算出所在位置，但这种定位方式精度仅为10m左右，对于大部分行业应用和军用领域而言，这还远远不够。</p>
<h3 id="1-地基增强系统（GBAS）"><a href="#1-地基增强系统（GBAS）" class="headerlink" title="1.地基增强系统（GBAS）"></a>1.地基增强系统（GBAS）</h3><p>人们通过在地面建立固定的参考站（CORS站）来获取卫星定位测量时的误差。进而将卫星定位坐标与自身精确坐标对比后的“改正数”结果，发送给接收机。例如，各地测绘、国土、气象等部分建设的国家连续运行基准站CORS网就是属于地基增强系统，后来建立的中国国家北斗地基增强系统也属于地基增强系统</p>
<h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><p>精度虽然很高，但覆盖范围有一定限制，难以覆盖高空、海上、沙漠、山区，形成了大分为的定位盲区。</p>
<h3 id="2-星基增强系统（SBAS）"><a href="#2-星基增强系统（SBAS）" class="headerlink" title="2.星基增强系统（SBAS）"></a>2.星基增强系统（SBAS）</h3><p>通过地球静止轨道（GEO）卫星搭载卫星导航增强信号转发器，可以向用户播发星历误差、卫星钟差、电离层延迟等多种修正信息，弥补地基增强系统的不足</p>
<p><img src="C:\blog\denerate\source\_posts\民用航空与导航技术\9.png" alt=""></p>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p><a href="https://www.zhihu.com/question/23175337">在卫星导航出现以前，飞机是靠什么导航飞行的？</a></p>
<p><a href="https://baike.baidu.com/item/%E6%83%AF%E6%80%A7%E5%AF%BC%E8%88%AA/5951188?fr=aladdin">百度百科-惯性导航</a></p>
<p><a href="https://baike.baidu.com/item/adf/1151291?fr=aladdin">百度百科-adf</a></p>
<p><a href="https://hkxb.buaa.edu.cn/CN/html/20191116.html#rhhz">仅用作航空器追踪的北斗机载设备适航要求分析</a></p>
<p><a href="https://wenku.baidu.com/view/52eb9371ab956bec0975f46527d3240c8447a117.html">北斗卫星导航系统及其在民航导航中的应用</a></p>
<p><a href="https://www.sohu.com/a/302841304_120098686?_trans_=000019_wzwza">了解一下星基增强系统与地基增强系统 </a></p>
]]></content>
      <tags>
        <tag>BUAA</tag>
      </tags>
  </entry>
</search>
